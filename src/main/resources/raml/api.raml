#%RAML 0.8
title: JOC API
version: 2.5.3
protocols: [ HTTP, HTTPS ]
#baseUri: http://test.sos-berlin.com:3001/joc/api
#mediaType: application/json

documentation:
  - title: VERSIONS
    content: !include api/documentation/common/versions.md


schemas:
  - errors: !include api/schemas/common/errors-schema.json
  - error420: !include api/schemas/common/error420-schema.json
  - ok: !include api/schemas/common/ok-schema.json
  - orders: !include api/schemas/order/orders_v-schema.json
  - jsFilter: !include api/schemas/controller/controllerId-optional-schema.json
  - jsFilterReq: !include api/schemas/controller/controllerId-required-schema.json
  - jsFilterWithUrl: !include api/schemas/controller/urlParam-schema.json
  - jsRegister: !include api/schemas/controller/registerParam-schema.json
  - taskFilter: !include api/schemas/job/taskFilter-schema.json
  - orderHistoryFilter: !include api/schemas/order/orderHistoryFilter-schema.json
  - addOrders: !include api/schemas/order/addOrders-schema.json
  - orderIds: !include api/schemas/order/orderIds-schema.json
  - modifyOrders: !include api/schemas/order/modifyOrders-schema.json
  - modifyWorkflows: !include api/schemas/workflow/modifyWorkflows-schema.json
  - modifyCalendars: !include api/schemas/calendar/calendarsFilter-schema.json
  - security: !include api/schemas/user/security-schema.json
  - loginConfiguration: !include api/schemas/configuration/login-schema.json


resourceTypes:
  - error: !include api/resourceTypes/common/error.raml
  - postWithPlainResponse: !include api/resourceTypes/joc/postWithPlainResponse.raml
  - postCalendarWithOkResponse: !include api/resourceTypes/calendar/postJSONWithOkResponse.raml
  - postDocuWithOkResponse: !include api/resourceTypes/docu/postJSONWithOkResponse.raml
  - postWithOkResponse: !include api/resourceTypes/controller/postWithOkResponse.raml
  - registerControllerWithOkResponse: !include api/resourceTypes/controller/registerControllerWithOkResponse.raml
  - postURLWithPlainResponse: !include api/resourceTypes/controller/postWithPlainResponse.raml
  - postStateResponse: !include api/resourceTypes/controller/postStateResponse.raml
  - postJSON: !include api/resourceTypes/common/postJSON.raml
  - postJSONWithOptionalJSId: !include api/resourceTypes/common/postJSONWithOptionalJSId.raml
  - postJSONWithoutJSId: !include api/resourceTypes/common/postJSONWithoutJSId.raml
  - postWithoutJSONandJSId: !include api/resourceTypes/common/postWithoutJSONandJSId.raml
  - postJSONWithOkWithoutJSId: !include api/resourceTypes/common/postJSONWithOkWithoutJSId.raml
  - postOnlyAccessToken: !include api/resourceTypes/common/postOnlyAccessToken.raml
  - postOnlyId: !include api/resourceTypes/common/postOnlyId.raml
  - postOnlyOptionalId: !include api/resourceTypes/common/postOnlyOptionalId.raml
  - postJSONWithOkResponse: !include api/resourceTypes/common/postJSONWithOkResponse.raml
  - postForDownload: !include api/resourceTypes/common/postForDownload.raml
  - postForUpload: !include api/resourceTypes/common/postForUpload.raml
  - postLog: !include api/resourceTypes/common/postLog.raml
  - postDocu: !include api/resourceTypes/docu/postDocu.raml
  - getDocu: !include api/resourceTypes/docu/getDocu.raml
  - login: !include api/resourceTypes/user/login.raml
  - logout: !include api/resourceTypes/user/logout.raml
  - postEvent: !include api/resourceTypes/common/postEvent.raml
  - postTaskLogWithPlainResponse: !include api/resourceTypes/job/postWithPlainResponse.raml
  - modifyOrder: !include api/resourceTypes/order/modify.raml
  - addOrder: !include api/resourceTypes/order/add.raml
  - postOrderLogWithPlainResponse: !include api/resourceTypes/order/postWithPlainResponse.raml
  - modifyWorkflow: !include api/resourceTypes/workflow/modify.raml
  - modifyCalendar: !include api/resourceTypes/calendar/modify.raml
  - loginConfiguration: !include api/resourceTypes/configuration/login.raml
  - postForDownloadUnsigned: !include api/resourceTypes/publish/postForDownloadUnsigned.raml
  - postForUploadSigned: !include api/resourceTypes/publish/postForUploadSigned.raml
  - postForUploadSignedRootCa: !include api/resourceTypes/publish/postForUploadSignedRootCa.raml
  - postForUploadUnsigned: !include api/resourceTypes/publish/postForUploadUnsigned.raml
  - postForGenerateKey: !include api/resourceTypes/publish/postForGenerateKey.raml
  - postForExport: !include api/resourceTypes/publish/postForExport.raml
  - postForImportDeploy: !include api/resourceTypes/publish/postForImportDeploy.raml
  - postForShowDepHistory: !include api/resourceTypes/publish/postForShowDepHistory.raml
  - postForUploadAgents: !include api/resourceTypes/agent/transfer/postForUploadAgents.raml


traits:
  - jobschedulerController: !include api/traits/jobschedulerController.raml
  - filteredByPath: !include api/traits/filteredByPath.raml
  - filteredByOrderId: !include api/traits/filteredByOrderId.raml
  - filteredByJSType: !include api/traits/filteredByJSType.raml
  - filteredByTransferFileId: !include api/traits/filteredByTransferFileId.raml
  - accessToken: !include api/traits/accessToken.raml
  - filename: !include api/traits/filename.raml

/agent:
  /delete:
    type:
      postJSONWithOkResponse:
        description: Removes Agent
        description1: !include api/documentation/agent/agentId.md
        description2: !include api/documentation/audit/auditLog.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        schema: !include api/schemas/agent/agentCommand-schema.json
        example: " "
  /reset:
    type:
      postJSONWithOkResponse:
        description: |
          Resets Agent<h5>
          Any currently running orders are continued. Workflows and other deployable objects are withdrawn.
          The Agent drops its journal and restarts. Then the Controller tries to reconnect to the Agent,
          deploys workflows etc. and submits orders to the Agent.
          </h5>
        description1: !include api/documentation/agent/agentId.md
        description2: !include api/documentation/agent/force.md
        description3: !include api/documentation/audit/auditLog.md
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        schema: !include api/schemas/agent/agentCommand-schema.json
        example: " "

/agents:
  type:
    postJSON:
      description: Gets Agents
      description1: !include api/documentation/agent/agentIds.md
      description2: !include api/documentation/agent/states.md
      description3: !include api/documentation/agent/onlyEnabledAgents.md
      description4: !include api/documentation/common/compact.md
      description5: " "
      description6: " "
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: !include api/documentation/agent/agents_v.md
      schema: !include api/schemas/agent/readAgents_v-schema.json
      schema200: !include api/schemas/agent/agents_v-schema.json
      example: !include api/examples/agent/agents_v-request-example.json
      example200: !include api/examples/agent/agents_v-example.json
  
  /cluster:
    type:
      postJSONWithOptionalJSId:
        description: Gets Subagent Clusters
        description1: !include api/documentation/agent/agentIds.md
        description2: !include api/documentation/agent/subagentClusterIds.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description11: " "
        description12: " "
        description13: " "
        description200: !include api/documentation/agent/subagentClusters_p.md
        schema: !include api/schemas/agent/readSubagentClusters-schema.json
        schema200: !include api/schemas/agent/subagentClusters-schema.json
        example: " "
        example200: " "
    
    /deploy:
      type:
        postJSONWithOkResponse:
          description: Deploys Subagent Clusters to Controller
          description1: !include api/documentation/agent/subagentClustersDeploy.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: !include api/documentation/audit/auditLog.md
          description10: " "
          schema: !include api/schemas/agent/deploySubagentClusters-schema.json
          example: " "

    /ordering:
      type:
        postJSONWithOkWithoutJSId:
          description: Change the order of the Subagent Clusters
          description1: !include api/documentation/agent/subagentClusterId.md
          description2: !include api/documentation/agent/predecessorSubagentClusterId.md
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          audit: " "
          schema: !include api/schemas/agent/orderingSubagentCluster-schema.json
          example: " "
          
    /revoke:
      type:
        postJSONWithOkResponse:
          description: Revokes deployed Subagent Clusters from Controller
          description1: !include api/documentation/agent/subagentClustersDeploy.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: !include api/documentation/audit/auditLog.md
          description10: " "
          schema: !include api/schemas/agent/deploySubagentClusters-schema.json
          example: " "

    /store:
      type:
        postJSONWithOkWithoutJSId:
          description: Stores Subagent Clusters
          description1: !include api/documentation/agent/subagentClusters.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: !include api/documentation/audit/auditLog.md
          description10: " "
          schema: !include api/schemas/agent/storeSubagentClusters-schema.json
          example: " "

    /delete:
      type:
        postJSONWithOkResponse:
          description: Deletes Subagent Clusters at Controller
          description1: !include api/documentation/agent/subagentClustersDeploy.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: !include api/documentation/audit/auditLog.md
          description10: " "
          schema: !include api/schemas/agent/deploySubagentClusters-schema.json
          example: " "
          
  /export:
    type:
      postForExport:
        description: Provides archive file (zip, tar.gz) to download agent configurations
        description1: !include api/documentation/agent/transfer/agentExportFilter.md
        schema: !include api/schemas/agent/transfer/agentExportFilter-schema.json
        example: !include api/examples/agent/transfer/agentExportFilter-example.json

  /import:
    type:
      postForUploadAgents:
        description: Uploads archive file (zip, tar.gz) with JSON files of agent configurations
        schema: !include api/schemas/agent/transfer/agentImportFilter-schema.json
        example: !include api/examples/agent/transfer/agentImportFilter-example.json

  /inventory:
    type:
      postJSONWithOptionalJSId:
        description: Gets persistent Standalone Agent information
        description1: !include api/documentation/agent/agentIds.md
        description2: " "
        description3: !include api/documentation/agent/onlyEnabledAgents.md
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description11: " "
        description12: " "
        description13: " "
        description200: !include api/documentation/agent/agents_p.md
        schema: !include api/schemas/agent/readAgents-schema.json
        schema200: !include api/schemas/agent/singleAgents-schema.json
        example: !include api/examples/controller/controllerParam-example.json
        example200: !include api/examples/agent/agents_p-example.json
        
    /cluster:
      type:
        postJSONWithOptionalJSId:
          description: Gets persistent Cluster Agent information
          description1: !include api/documentation/agent/agentIds.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          description11: " "
          description12: " "
          description13: " "
          description200: !include api/documentation/agent/clusterAgents_p.md
          schema: !include api/schemas/agent/readAgents-schema.json
          schema200: !include api/schemas/agent/clusterAgents-schema.json
          example: !include api/examples/controller/controllerParam-example.json
          example200: " "

      # use agent/delete
      #/delete:
      #  type:
      #    postJSONWithOkResponse:
      #      description: Deletes Cluster Agents at Controller
      #      description1: !include api/documentation/agent/clusterAgentsDeploy.md
      #      description2: " "
      #      description3: " "
      #      description4: " "
      #      description5: " "
      #      description6: " "
      #      description7: " "
      #      description8: " "
      #      description9: !include api/documentation/audit/auditLog.md
      #      description10: " "
      #      schema: !include api/schemas/agent/deployClusterAgents-schema.json
      #      example: " "

      /deploy:
        type:
          postJSONWithOkResponse:
            description: Deploys Cluster Agents to Controller
            description1: !include api/documentation/agent/clusterAgentsDeploy.md
            description2: " "
            description3: " "
            description4: " "
            description5: " "
            description6: " "
            description7: " "
            description8: " "
            description9: !include api/documentation/audit/auditLog.md
            description10: " "
            schema: !include api/schemas/agent/deployClusterAgents-schema.json
            example: " "

      /ordering:
        type:
          postJSONWithOkWithoutJSId:
            description: Change the order of the Cluster Agents
            description1: !include api/documentation/agent/agentId.md
            description2: !include api/documentation/agent/predecessorAgentId.md
            description3: " "
            description4: " "
            description5: " "
            description6: " "
            description7: " "
            description8: " "
            description9: " "
            description10: " "
            audit: " "
            schema: !include api/schemas/agent/orderingAgent-schema.json
            example: " "
          
      /revoke:
        type:
          postJSONWithOkResponse:
            description: Revokes Cluster Agent
            description1: !include api/documentation/agent/clusterAgentsDeploy.md
            description2: " "
            description3: " "
            description4: " "
            description5: " "
            description6: " "
            description7: " "
            description8: " "
            description9: !include api/documentation/audit/auditLog.md
            description10: " "
            schema: !include api/schemas/agent/deployClusterAgents-schema.json
            example: " "
          
      /subagent:
        /reset:
          type:
            postJSONWithOkResponse:
              description: Resets Subagent
              description1: " "
              description2: !include api/documentation/agent/subagentId.md
              description3: !include api/documentation/agent/subagentForce.md
              description4: " "
              description5: " "
              description6: " "
              description7: " "
              description8: " "
              description9: !include api/documentation/audit/auditLog.md
              description10: " "
              schema: !include api/schemas/agent/subagentCommand-schema.json
              example: " "
        
      /subagents:
        /delete:
          type:
            postJSONWithOkResponse:
              description: Deletes Subagents
              description1: " "
              description2: !include api/documentation/agent/subagentIds.md
              description3: " "
              description4: " "
              description5: " "
              description6: " "
              description7: " "
              description8: " "
              description9: !include api/documentation/audit/auditLog.md
              description10: " "
              schema: !include api/schemas/agent/subagentsCommand-schema.json
              example: " "
        
        /disable:
          type:
            postJSONWithOkResponse:
              description: Disables Subagents
              description1: " "
              description2: !include api/documentation/agent/subagentIds.md
              description3: " "
              description4: " "
              description5: " "
              description6: " "
              description7: " "
              description8: " "
              description9: !include api/documentation/audit/auditLog.md
              description10: " "
              schema: !include api/schemas/agent/subagentsCommand-schema.json
              example: " "

        /enable:
          type:
            postJSONWithOkResponse:
              description: Enables Subagents
              description1: " "
              description2: !include api/documentation/agent/subagentIds.md
              description3: " "
              description4: " "
              description5: " "
              description6: " "
              description7: " "
              description8: " "
              description9: !include api/documentation/audit/auditLog.md
              description10: " "
              schema: !include api/schemas/agent/subagentsCommand-schema.json
              example: " "
        
        /ordering:
          type:
            postJSONWithOkWithoutJSId:
              description: Change the order of the Subagents
              description1: !include api/documentation/agent/subagentId.md
              description2: !include api/documentation/agent/predecessorSubagentId.md
              description3: " "
              description4: " "
              description5: " "
              description6: " "
              description7: " "
              description8: " "
              description9: " "
              description10: " "
              audit: " "
              schema: !include api/schemas/agent/orderingSubagent-schema.json
              example: " "
          
        /store:
          type:
            postJSONWithOkResponse:
              description: Stores Subagents to a Cluster Agent
              description1: !include api/documentation/agent/agentId.md
              description2: !include api/documentation/agent/subAgents.md
              description3: " "
              description4: " "
              description5: " "
              description6: " "
              description7: " "
              description8: " "
              description9: !include api/documentation/audit/auditLog.md
              description10: " "
              schema: !include api/schemas/agent/storeSubagentsParam-schema.json
              example: " "
            
      /store:
        type:
          postJSONWithOkResponse:
            description: Stores Cluster Agents
            description1: !include api/documentation/agent/clusterAgents.md
            description2: " "
            description3: " "
            description4: " "
            description5: " "
            description6: " "
            description7: " "
            description8: " "
            description9: !include api/documentation/audit/auditLog.md
            description10: " "
            schema: !include api/schemas/agent/storeClusterParam-schema.json
            example: " "

    /enable:
      type:
        postJSONWithOkResponse:
          description: Enables standalone Agents at the Controller
          description1: !include api/documentation/agent/agentIdsRequired.md
          description2: !include api/documentation/audit/auditLog.md
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          schema: !include api/schemas/agent/deployAgents-schema.json
          example: " "
          
    /deploy:
      type:
        postJSONWithOkResponse:
          description: Deploys standalone Agents to Controllers
          description1: !include api/documentation/agent/agentIdsRequired.md
          description2: !include api/documentation/audit/auditLog.md
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          schema: !include api/schemas/agent/deployAgents-schema.json
          example: " "
          
    /disable:
      type:
        postJSONWithOkResponse:
          description: Disables standalone Agents at the Controller
          description1: !include api/documentation/agent/agentIdsRequired.md
          description2: !include api/documentation/audit/auditLog.md
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          schema: !include api/schemas/agent/deployAgents-schema.json
          example: " "
          
    /ordering:
      type:
        postJSONWithOkWithoutJSId:
          description: Change the order of the standalone Agents
          description1: !include api/documentation/agent/agentId.md
          description2: !include api/documentation/agent/predecessorAgentId.md
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          audit: " "
          schema: !include api/schemas/agent/orderingAgent-schema.json
          example: " "
          
    /reassign:
      type:
        postWithOkResponse:
          description: Repeats assignment of Agents to Controllers
          urlparam: " "
          failover: " "
          audit: !include api/documentation/audit/auditLog.md
    
    /revoke:
      type:
        postJSONWithOkResponse:
          description: Revokes standalone Agents
          description1: !include api/documentation/agent/agentIdsRequired.md
          description2: !include api/documentation/audit/auditLog.md
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          schema: !include api/schemas/agent/deployAgents-schema.json
          example: " "
          
    /store:
      type:
        postJSONWithOkResponse:
          description: Stores standalone Agents
          description1: !include api/documentation/agent/agents.md
          description2: !include api/documentation/audit/auditLog.md
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          schema: !include api/schemas/agent/storeParam-schema.json
          example: !include api/examples/agent/store-example.json

  /report:
    type:
      postJSONWithOptionalJSId:
        description: Gets report of Agent tasks
        description1: !include api/documentation/agent/agentIdsUrls.md
        description2: !include api/documentation/common/dateFrom.md
        description3: !include api/documentation/common/dateTo.md
        description4: !include api/documentation/common/timeZone.md
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description11: " "
        description12: " "
        description13: " "
        description200: !include api/documentation/agent/report.md
        schema: !include api/schemas/agent/agentReportFilter-schema.json
        schema200: !include api/schemas/agent/agentReports-schema.json
        example: " "
        example200: " "
  
  /reset:
    type:
      postJSONWithOkResponse:
        description: |
          Resets Agents<h5>
          Any currently running orders are continued. Workflows and other deployable objects are withdrawn.
          The Agents drop its journal and restart. Then the Controller tries to reconnect to the Agents,
          deploys workflows etc. and submits orders to the Agents.
          </h5>
        description1: !include api/documentation/agent/agentIdsRequired.md
        description2: !include api/documentation/agent/force.md
        description3: !include api/documentation/audit/auditLog.md
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        schema: !include api/schemas/agent/resetAgents-schema.json
        example: " "

/audit_log:
  type:
    postJSONWithOptionalJSId:
      description: Gets the audit log
      description1: !include api/documentation/common/dateFrom.md
      description2: !include api/documentation/common/dateTo.md
      description3: !include api/documentation/common/timeZone.md
      description4: " "
      description5: !include api/documentation/common/folders.md
      description6: !include api/documentation/audit/objectTypes.md
      description7: " "
      description8: !include api/documentation/audit/ticketLink.md
      description9: !include api/documentation/audit/comment.md
      description10: !include api/documentation/configuration/userParam.md
      description11: !include api/documentation/common/limit.md
      description12: " "
      description13: " "
      description200: !include api/documentation/audit/audit.md
      schema: !include api/schemas/audit/auditLogFilter-schema.json
      schema200: !include api/schemas/audit/auditLog-schema.json
      example: !include api/examples/audit/audit-request-example.json
      example200: !include api/examples/audit/audit-response-example.json
  /details:
    type:
      postJSONWithoutJSId:
        description: Gets objects of an audit log entry
        description1: !include api/documentation/audit/detail.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema200: !include api/schemas/audit/auditLogDetails-schema.json
        example200: !include api/examples/audit/auditDetail-response-example.json
        schema: !include api/schemas/audit/auditLogDetailFilter-schema.json
        example: !include api/examples/audit/auditDetail-request-example.json
        

  /login_history:
    type:
      postJSONWithoutJSId:
        description: List of failed accounts
        description1: !include api/documentation/common/dateFrom.md
        description2: !include api/documentation/common/dateTo.md
        description3: !include api/documentation/common/timeZone.md
        description4: !include api/documentation/audit/accountName.md
        description200: " "
        example200: " "
        schema200: !include api/schemas/security/history/loginHistory-schema.json
        schema: !include api/schemas/security/history/loginHistoryFilter-schema.json
        

/authentication:
  description: This is not an API call. Use child urls instead!

  /joc_cockpit_permissions:
    type:
      postOnlyAccessToken:
        description: Gets permissions for current account
        description200: " "
        example200: !include api/examples/user/permissions-example.json
        schema200: !include api/schemas/security/permissions/permissions-schema.json

  /login:
    type: login

  /logout:
    type: logout

  /auth:
    type:
      postJSONWithoutJSId:
        description: Reads accounts, roles permissions from Identity Service
        description1: !include api/documentation/security/identityService/identityServiceName.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema200: !include api/schemas/security/securityConfiguration/security-configuration-schema.json
        example200: " "
        schema: !include api/schemas/security/securityConfiguration/security-configuration-schema.json
        example: " "


/calendar/dates:
  type:
    postJSONWithoutJSId:
      description: Gets dates of a calendar
      description1: !include api/documentation/calendar/calendarPathOrObject.md
      description2: " "
      description3: !include api/documentation/calendar/dateFrom.md
      description4: !include api/documentation/calendar/dateTo.md
      description5: " "
      description6: " "
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: " "
      schema: !include api/schemas/calendar/calendarDatesFilter-schema.json
      example: !include api/examples/calendar/calendarDates-example.json
      schema200: !include api/schemas/calendar/dates-schema.json
      example200: TODO

/calendars:
  type:
    postJSONWithoutJSId:
      description: Gets released calendars
      description1: !include api/documentation/calendar/filteredByCalendarPaths.md
      description2: " "
      description3: !include api/documentation/common/compact.md
      description4: !include api/documentation/common/regex.md
      description5: !include api/documentation/common/folders.md
      description6: !include api/documentation/calendar/calendarType.md
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: !include api/documentation/calendar/calendar.md
      schema: !include api/schemas/calendar/calendarsFilter-schema.json
      schema200: !include api/schemas/calendar/calendars-schema.json
      example: " "
      example200: " "
      
  /search:
    type:
      postJSONWithoutJSId:
        description: Searches released calendars
        description1: !include api/documentation/inventory/search/search-folders.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: !include api/documentation/inventory/search/advanched.md
        description7: !include api/documentation/inventory/search/advanched-workflow.md
        description8: !include api/documentation/inventory/search/advanched-lock.md
        description9: !include api/documentation/inventory/search/advanched-noticeboard.md
        description10: " "
        description200: " "
        schema: !include api/schemas/inventory/search/request-base-search-filter-schema.json
        example: TODO
        schema200: !include api/schemas/inventory/search/response-search-schema.json
        example200: TODO

/controller:
  type:
    postStateResponse:
      description: Gets Controller status information
      urlparam: !include api/documentation/controller/urlParamClusterRequired.md
      description200: !include api/documentation/controller/master.md
      schema200: !include api/schemas/controller/jobscheduler200_v-schema.json
      example200: " "
  /abort:
    type:
      postWithOkResponse:
        description: Aborts Controller
        urlparam: !include api/documentation/controller/urlParamClusterRequired.md
        failover: " "
        audit: !include api/documentation/audit/auditLog.md
  /abort_and_restart:
    type:
      postWithOkResponse:
        description: |
          Aborts and restarts Controller and optionally switches over
        urlparam: !include api/documentation/controller/urlParamClusterRequired.md
        failover: " "
        audit: !include api/documentation/audit/auditLog.md

  /cluster/appoint_nodes:
    type:
      postWithOkResponse:
        description: |
          Re-establish Controller Cluster roles and assign cluster-watching Agent<h5>
          * Primary and secondary Controller instances are assigned the active and standby roles.
          * In addition an Agent is assigned the cluster-watching role. This information is persistent when registering a Controller.
          * The resource can be used to re-establish the roles in a cluster, e.g. in case that Controller journals are renewed.
          </h5>
        urlparam: " "
        failover: " "
        audit: !include api/documentation/audit/auditLog.md

  /cluster/confirm_node_loss:
    type:
      postWithOkResponse:
        description: Confirms a loss node of the Controller Cluster is really lost
        urlparam: " "
        failover: " "
        audit: !include api/documentation/audit/auditLog.md
        
  /cluster/switchover:
    type:
      postWithOkResponse:
        description: Switches over Controller Cluster
        urlparam: " "
        failover: " "
        audit: !include api/documentation/audit/auditLog.md

  /ids:
    type: error
    post:
      description: |
        <h2>Gets Controller IDs</h2>
      responses:
        200:
          description: |
            * The collection of all available Controller IDs can be used for a
            selectbox in which the user can change the ID.
            * The ID that is specified in the selected field will be used for
            all following requests
          body:
            application/json:
              schema: !include api/schemas/controller/controllerIds-schema.json
              example: !include api/examples/controller/ids-example.json
  /log:
    type:
      postURLWithPlainResponse:
        description: Provides Controller log (controller.log) for download in gzip format
        description200: Snapshot of current controller.log for download in gzip format

  /p:
    type:
      postStateResponse:
        description: Gets Controller persistent information
        urlparam: !include api/documentation/controller/urlParamClusterRequired.md
        description200: !include api/documentation/controller/jobscheduler_p.md
        schema200: !include api/schemas/controller/jobscheduler200_v-schema.json
        example200: " "

  /register:
    type:
      registerControllerWithOkResponse:
        description: |
          Registers a Controller<h5>
          * A Controllers consists of a standalone instance or cluster with primary and secondary nodes.
          * This resource adds a Controller to JOC Cockpit. Updates Controller instance information such as the URL.
          </h5>
        audit: !include api/documentation/audit/auditLog.md

  /restart:
    type:
      postWithOkResponse:
        description: Restarts Controller instance
        urlparam: !include api/documentation/controller/urlParamClusterRequired.md
        failover: !include api/documentation/controller/failover.md
        audit: !include api/documentation/audit/auditLog.md

  /terminate:
    type:
      postWithOkResponse:
        description: Terminates Controller instance
        urlparam: !include api/documentation/controller/urlParamClusterRequired.md
        failover: !include api/documentation/controller/failover.md
        audit: !include api/documentation/audit/auditLog.md

  /test:
    type:
      postJSONWithoutJSId:
        description: Tests Controller instance connection and Controller ID
        description1: |
          <tr><td>``controllerId``</td><td>optional, string</td><td>Controller ID is used to check if the Controller is registered for the given Controller ID.</td><td>scheduler</td><td></td></tr>
        description2: !include api/documentation/controller/urlParamRequired.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: !include api/documentation/controller/jobschedulerTest.md
        schema200: !include api/schemas/controller/jobscheduler200_v-schema.json
        example200: !include api/examples/controller/test-example.json
        schema: !include api/schemas/controller/testParam-schema.json
        example: |
          {
            "controllerId": "scheduler",
            "url": "http://jobSchedulerHost:40444"
          }

  /unregister:
    type:
      postWithOkResponse:
        description: Unregisters Controller
        urlparam: " "
        failover: " "
        audit: !include api/documentation/audit/auditLog.md


/controllers:
  type:
    postOnlyOptionalId:
      description: Gets Controllers
      description200: !include api/documentation/controller/master.md
      schema200: !include api/schemas/controller/masters-schema.json
      example200: " "
  /p:
    type:
      postOnlyOptionalId:
        description: Gets persistent Controller information
        description200: !include api/documentation/controller/controller_p.md
        schema200: !include api/schemas/controller/masters-schema.json
        example200: !include api/examples/controller/controller_p-example.json

/daily_plan:
  description: This is not an API call. Use its children!!

  /calendar/deploy:
    type:
      postOnlyAccessToken:
        description: Deploys current daily plan calendar to Controllers
        description200: |
          **Confirm <span style="text-transform: capitalize">deploy</span> successfully**
        schema200: ok
        example200: |
          {
            "deliveryDate":"2021-12-05T21:13:35Z",
            "ok":true
          }

  /order/variables:
    type:
      postJSON:
        description: Reads the variables for a given order
        description1: !include api/documentation/order/orderIdRequired.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/order/orderFilter-schema.json
        schema200: !include api/schemas/orderManagement/orders/orderVariables-schema.json
        example: " "
        example200: " "
  /orders:
    type:
      postJSONWithoutJSId:
        description: Gets orders from a daily plan interval
        description1: !include api/documentation/dailyplan/orders/dailyPlanOrdersFilterDefRequired.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: !include api/documentation/dailyplan/orders/controllerIds.md
        description7: !include api/documentation/dailyplan/orders/orderIds.md
        description8: !include api/documentation/dailyplan/orders/late.md
        description9: !include api/documentation/dailyplan/orders/states.md
        description10: !include api/documentation/dailyplan/orders/submissionHistoryIds.md
        description200: " "
        schema: !include api/schemas/orderManagement/dailyplan/dailyPlanOrdersFilterDefRequired-schema.json
        schema200: !include api/schemas/orderManagement/dailyplan/plannedOrders-schema.json
        example: " "
        example200: " "

    /cancel:
      type:
        postJSONWithOkWithoutJSId:
          description: Cancels submitted orders for a daily plan interval
          description1: !include api/documentation/dailyplan/orders/dailyPlanOrdersFilterDef.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: !include api/documentation/dailyplan/orders/controllerIds.md
          description8: !include api/documentation/dailyplan/orders/orderIds.md
          description9: " "
          description10: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/orderManagement/dailyplan/dailyPlanOrdersFilterDef-schema.json
          example: " "
    
    /generate:
      type:
        postJSONWithOkResponse:
          description: Generates orders for a given daily plan
          description1: !include api/documentation/dailyplan/generate/dailyPlanDate.md
          description2: !include api/documentation/dailyplan/generate/schedulePaths.md
          description3: !include api/documentation/dailyplan/generate/workflowPaths.md
          description4: !include api/documentation/dailyplan/generate/overwrite.md
          description5: !include api/documentation/dailyplan/generate/withSubmit.md
          description6: " "
          description7: " "
          description8: " "
          description10: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/dailyplan/generate/generate-request-schema.json
          example: " "

    /submit:
      type:
        postJSONWithOkWithoutJSId:
          description: Submits planned orders for a daily plan interval
          description1: !include api/documentation/dailyplan/orders/dailyPlanOrdersFilterDef.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: !include api/documentation/dailyplan/submit/controllerIds.md
          description8: !include api/documentation/dailyplan/orders/orderIds.md
          description9: !include api/documentation/dailyplan/orders/submissionHistoryIds.md
          description10: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/orderManagement/dailyplan/dailyPlanOrdersFilterDef-schema.json
          example: " "
    /delete:
      type:
        postJSONWithOkWithoutJSId:
          description: Deletes planned orders for a daily plan interval
          description1: !include api/documentation/dailyplan/orders/dailyPlanOrdersFilterDefRequired.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          description6: !include api/documentation/dailyplan/orders/controllerIds.md
          description7: !include api/documentation/dailyplan/orders/orderIds.md
          description8: !include api/documentation/dailyplan/orders/late.md
          description9: !include api/documentation/dailyplan/orders/submissionHistoryIds.md
          description10: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/orderManagement/dailyplan/dailyPlanOrdersFilterDefRequired-schema.json
          example: " "
    /modify:
      type:
        postJSON:
          description: Modifies Orders for the daily plan
          description1: !include api/documentation/dailyplan/modify/orderIds.md
          description2: !include api/documentation/dailyplan/modify/startTime.md
          description3: !include api/documentation/dailyplan/modify/cycle.md
          description4: !include api/documentation/dailyplan/modify/orderParametrisation.md
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: !include api/documentation/audit/auditLog.md
          description200: |
            This API changes the OrderId. For ad hoc orders, a map in the form <br/>  ``"oldOrderId": "newOrderId"``<br/>is returned.
          schema: !include api/schemas/orderManagement/dailyplan/dailyPlanModifyOrder-schema.json
          schema200: !include api/schemas/order/orderIdMap-schema.json
          example: " "
          example200: !include api/examples/order/modify-example.json
      post:
        responses:
          419:

    /summary:
      type:
        postJSONWithoutJSId:
          description: Gets summary order counts from a daily plan interval
          description1: !include api/documentation/dailyplan/orders/dailyPlanOrdersFilterDefRequired.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: !include api/documentation/dailyplan/orders/controllerIds.md
          description8: !include api/documentation/dailyplan/orders/orderIds.md
          description9: !include api/documentation/dailyplan/orders/submissionHistoryIds.md
          description10:
          description200: " "
          schema: !include api/schemas/orderManagement/dailyplan/dailyPlanOrdersFilterDefRequired-schema.json
          schema200: !include api/schemas/orderManagement/dailyplan/dailyPlanOrderSummary-schema.json
          example: " "
          example200: " "

  /history:
    type:
      postJSONWithOptionalJSId:
        description: Gets daily plan dates history
        description1: !include api/documentation/dailyplan/history/dateFrom.md
        description2: !include api/documentation/dailyplan/history/dateTo.md
        description3: !include api/documentation/dailyplan/history/submitted.md
        description4: !include api/documentation/dailyplan/history/limit.md
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/dailyplan/history/main-request-schema.json
        schema200: !include api/schemas/dailyplan/history/main-response-schema.json
        example: " "
        example200: " "

    /submissions:
      type:
        postJSON:
          description: Gets daily plan date submission times history
          description1: !include api/documentation/dailyplan/history/date.md
          description2: !include api/documentation/dailyplan/history/submitted.md
          description3: !include api/documentation/dailyplan/history/limit.md
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10:
          description200: " "
          schema: !include api/schemas/dailyplan/history/submissions-request-schema.json
          schema200: !include api/schemas/dailyplan/history/submissions-response-schema.json
          example: " "
          example200: " "

      /orders:
        type:
          postJSON:
            description: Gets daily plan submission time orders history
            description1: !include api/documentation/dailyplan/history/date.md
            description2: !include api/documentation/dailyplan/history/submissionTime.md
            description3: !include api/documentation/dailyplan/history/submitted.md
            description4: !include api/documentation/dailyplan/history/limit.md
            description5: " "
            description6: " "
            description7: " "
            description8: " "
            description9: " "
            description10:
            description200: " "
            schema: !include api/schemas/dailyplan/history/submissions-orders-request-schema.json
            schema200: !include api/schemas/dailyplan/history/submissions-orders-response-schema.json
            example: " "
            example200: " "

  /submissions:
    type:
      postJSON:
        description: Gets daily plan submissions
        description1: !include api/documentation/dailyplan/submissions/submissionsFilter.md
        description2: !include api/documentation/dailyplan/submissions/dateFrom.md
        description3: !include api/documentation/dailyplan/submissions/dateTo.md
        description5: " "
        description4: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/dailyplan/submissions/submissions-request-schema.json
        schema200: !include api/schemas/dailyplan/submissions/submissions-response-schema.json
        example: " "
        example200: " "

    /delete:
      type:
        postJSON:
          description: Deletes daily plan submissions
          description1: !include api/documentation/dailyplan/submissions/submissionsDeleteFilter.md
          description2: !include api/documentation/dailyplan/submissions/deleteDateFor.md
          description3: !include api/documentation/dailyplan/submissions/dateFrom.md
          description4: !include api/documentation/dailyplan/submissions/deleteDateTo.md
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          description200: " "
          schema: !include api/schemas/dailyplan/submissions/submissions-delete-request-schema.json
          schema200: ok
          example: " "
          example200: " "

/descriptor:
  description: This is not an API call. Use its children!!
  /copy:
    type:
      postJSONWithoutJSId:
        description: copies deployment descriptor object
        description1: !include api/documentation/descriptor/pathAndType.md
        description2: !include api/documentation/descriptor/newPath.md
        description3: !include api/documentation/inventory/suffixPrefix4copy.md
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: !include api/documentation/audit/auditLog.md
        description200: " "
        schema: !include api/schemas/descriptor/copy/request-filter-schema.json
        example: !include api/examples/inventory/rename-example.json
        schema200: !include api/schemas/inventory/common/response-newPath-schema.json
        example200: " "

  /read:
    type:
      postJSONWithoutJSId:
        description: Reads configuration of a deployment descriptor object
        description1: !include api/documentation/descriptor/path.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/descriptor/common/request-filter-schema.json
        example: TODO
        schema200: !include api/schemas/inventory/configurationObject-schema.json
        example200: TODO

  /read/folder:
    type:
      postJSONWithoutJSId:
        description: Reads deployment descriptors folder content
        description1: !include api/documentation/descriptor/folderpath.md
        description2: !include api/documentation/common/recursive.md
        description3: !include api/documentation/inventory/onlyValidObjects.md
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/descriptor/common/request-folder-schema.json
        example: TODO
        schema200: !include api/schemas/descriptor/common/response-folder-schema.json
        example200: TODO
        
  /remove:
    type:
      postJSONWithOkWithoutJSId:
        description: Removes deployment descriptor objects
        description1: !include api/documentation/descriptor/paths.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        audit: !include api/documentation/audit/auditLog.md
        schema: !include api/schemas/descriptor/remove/request-filters-schema.json
        example: !include api/examples/descriptor/paths-example.json

  /remove/folder:
    type:
      postJSONWithOkWithoutJSId:
        description: Removes folder of inventory objects
        description1: !include api/documentation/descriptor/folderpath.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        audit: !include api/documentation/audit/auditLog.md
        schema: !include api/schemas/descriptor/common/request-folder-schema.json
        example: TODO

  /rename:
    type:
      postJSONWithoutJSId:
        description: Renames/Moves inventory object
        description1: !include api/documentation/descriptor/pathAndType.md
        description2: !include api/documentation/descriptor/newPath.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: !include api/documentation/audit/auditLog.md
        description200: " "
        schema: !include api/schemas/descriptor/rename/request-filter-schema.json
        example: !include api/examples/descriptor/rename-example.json
        schema200: !include api/schemas/descriptor/common/response-newPath-schema.json
        example200: " "

  /store:
    type:
      postJSONWithoutJSId:
        description: Stores inventory object
        description1: !include api/documentation/descriptor/pathAndType.md
        description2: !include api/documentation/descriptor/configuration-request.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: !include api/documentation/audit/auditLog.md
        description200: 
        schema: !include api/schemas/inventory/configurationObject-schema.json
        example: " "
        schema200: !include api/schemas/inventory/configurationObject-schema.json
        example200: !include api/examples/descriptor/store-response-example.json

  /trash:
    description: This is not an API call. Use its children!!

    /delete:
      type:
        postJSONWithOkWithoutJSId:
          description: Deletes discarded deployment descriptors
          description1: !include api/documentation/descriptor/paths.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/descriptor/remove/request-filters-schema.json
          example: !include api/examples/descriptor/paths-example.json

    /delete/folder:
      type:
        postJSONWithOkWithoutJSId:
          description: Deletes folder of discarded deployment descriptor
          description1: !include api/documentation/descriptor/folderpath.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/descriptor/common/request-folder-schema.json
          example: TODO

    /read:
      type:
        postJSONWithoutJSId:
          description: Reads configuration of a discarded deployment descriptor
          description1: !include api/documentation/descriptor/path.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          description200: " "
          schema: !include api/schemas/descriptor/common/request-filter-schema.json
          example: TODO
          schema200: !include api/schemas/inventory/configurationObject-schema.json
          example200: TODO

    /read/folder:
      type:
        postJSONWithoutJSId:
          description: Reads folder content
          description1: !include api/documentation/descriptor/folderpath.md
          description2: !include api/documentation/common/recursive.md
          description3: !include api/documentation/inventory/onlyValidObjects.md
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          description200: " "
          schema: !include api/schemas/descriptor/common/request-folder-schema.json
          example: TODO
          schema200: !include api/schemas/descriptor/common/response-folder-schema.json
          example200: TODO

    /restore:
      type:
        postJSONWithoutJSId:
          description: Restore a discarded inventory object
          description1: !include api/documentation/descriptor/pathAndType.md
          description2: !include api/documentation/descriptor/newRestorePath.md
          description3: !include api/documentation/inventory/suffixPrefix4restore.md
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: !include api/documentation/audit/auditLog.md
          description200: 
          schema: !include api/schemas/descriptor/restore/request-filter-schema.json
          example: !include api/examples/descriptor/path-example.json
          schema200: !include api/schemas/descriptor/common/response-newPath-schema.json
          example200: " "

/documentation:
  description: This is not an API call. Use its children!!

  /edit:
    type:
      postJSONWithOkWithoutJSId:
        description: Modifies the assignment reference
        description1: !include api/documentation/docu/docPath.md
        description2: !include api/documentation/docu/assignRef.md
        description3: " "
        description4: " "
        description5: " "
        audit: !include api/documentation/audit/auditLog.md
        schema: !include api/schemas/docu/documentationFilter-schema.json
        example: " "
  /show:
    get:
    type:
      postDocu:
        jsObjectParam: documentation
        jsObject: documentation
        description1: !include api/documentation/docu/jsObject.md
        description2: " "
        schema: !include api/schemas/docu/documentationShow-schema.json
        example: " "
  /used:
    type:
      postJSONWithoutJSId:
        description: Gets objects that use the documentation
        description1: !include api/documentation/docu/docPath.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/docu/documentationFilter-schema.json
        schema200: !include api/schemas/docu/usedBy-schema.json
        example: !include api/examples/docu/used-request-example.json
        example200: !include api/examples/docu/used-response-example.json

/documentations:
  type:
    postJSONWithoutJSId:
      description: Gets documentations
      description1: !include api/documentation/docu/filteredByPaths.md
      description2: " "
      #description3: !include api/documentation/common/regex.md
      description3: " "
      description4: !include api/documentation/common/folders.md
      description5: !include api/documentation/docu/docuTypes.md
      description6: " "
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: !include api/documentation/docu/docu.md
      schema: !include api/schemas/docu/documentationsFilter-schema.json
      schema200: !include api/schemas/docu/documentations-schema.json
      example: " "
      example200: " "
  /export:
    get:
    type:
      postForDownload:
        description: Provides export file (zip) as download of documentations
        description1: !include api/documentation/docu/filteredByPaths.md
        description2: !include api/documentation/common/folders.md
        description3: " "
        description4: " "
        description5: " "
        infoapi: ./documentation/export
        schema: !include api/schemas/docu/documentationsFilter-schema.json
        example: " "
    /info:
      type:
        postJSONWithoutJSId:
          description: Gets temporary filename for export
          description1: !include api/documentation/docu/filteredByPaths.md
          description2: !include api/documentation/common/folders.md
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          description200: !include api/documentation/docu/exportInfo.md
          schema: !include api/schemas/docu/documentationsFilter-schema.json
          schema200: !include api/schemas/docu/exportInfo-schema.json
          example: " "
          example200: " "
  /import:
    type:
      postForUpload:
        description: Imports Documentations
  /delete:
    type:
      postJSONWithoutJSId:
        description: Deletes Documentations
        description1: !include api/documentation/docu/delete.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: !include api/documentation/audit/auditLog.md
        description200: " "
        schema: !include api/schemas/docu/documentationsDeleteFilter-schema.json
        schema200: ok
        example: " "
        example200: " "

/iam:
  description: This is not an API call. Use its children!!
  /accounts:
    type:
      postJSONWithoutJSId:
        description: Returns a collection of Accounts
        description1: !include api/documentation/security/identityService/identityServiceName.md
        description2: !include api/documentation/security/account/list/accountName.md
        description3: !include api/documentation/security/account/list/enabled.md
        description4: !include api/documentation/security/account/list/disabled.md
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/security/accounts/accountListFilter-schema.json
        schema200: !include api/schemas/security/accounts/accounts-schema.json
        example: " "
        example200: " "  
    /delete:
      type:
        postJSONWithOkWithoutJSId:
          description: Deletes accounts
          description1: !include api/documentation/security/identityService/identityServiceName.md
          description2: !include api/documentation/security/account/delete/accountNames.md
          description3: !include api/documentation/security/account/delete/enabled.md
          description4: !include api/documentation/security/account/delete/disabled.md
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/security/accounts/accountsFilter-schema.json
          example: " "          
    /forcepasswordchange:
      type:
        postJSONWithOkWithoutJSId:
          description: Forces accounts to set a new password during the next login
          description1: !include api/documentation/security/identityService/identityServiceName.md
          description2: !include api/documentation/security/account/forcepasswordchange/accountNames.md
          description3: " "
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/security/accounts/accountNamesFilter-schema.json
          example: " "          
    /resetpassword:
      type:
        postJSONWithOkWithoutJSId:
          description: Sets accounts to the initial password. 
          description1: !include api/documentation/security/identityService/identityServiceName.md
          description2: !include api/documentation/security/account/resetpassword/accountNames.md
          description3: " "
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/security/accounts/accountNamesFilter-schema.json
          example: " "          
    /enable:
      type:
        postJSONWithOkWithoutJSId:
          description: Enables accounts
          description1: !include api/documentation/security/identityService/identityServiceName.md
          description2: !include api/documentation/security/account/enable/accountNames.md
          description3: " "
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/security/accounts/accountNamesFilter-schema.json
          example: " "          
    /disable:
      type:
        postJSONWithOkWithoutJSId:
          description: Disables accounts
          description1: !include api/documentation/security/identityService/identityServiceName.md
          description2: !include api/documentation/security/account/disable/accountNames.md
          description3: " "
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/security/accounts/accountNamesFilter-schema.json
          example: " "          
  
        
  /account:
    type:
      postJSONWithoutJSId:
        description: Returns an account
        description1: !include api/documentation/security/identityService/identityServiceName.md
        description2: !include api/documentation/security/account/accountName.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/security/accounts/accountFilter-schema.json
        schema200: !include api/schemas/security/accounts/account-schema.json
        example: " "
        example200: " "        
    /store:
      type:
        postJSONWithOkWithoutJSId:
          description: Stores an account
          description1: !include api/documentation/security/identityService/identityServiceName.md
          description2: !include api/documentation/security/account/accountName.md
          description3: !include api/documentation/security/account/store/disabled.md
          description4: !include api/documentation/security/account/forcepasswordchange.md
          description5: !include api/documentation/security/account/changepassword/password.md
          description6: !include api/documentation/security/account/store/roles.md
          description7: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/security/accounts/account-schema.json
          example: " "    
                    
    /rename:
      type:
        postJSONWithOkWithoutJSId:
          description: Renames an account   
          description1: !include api/documentation/security/identityService/identityServiceName.md
          description2: !include api/documentation/security/account/rename/accountoldname.md
          description3: !include api/documentation/security/account/rename/accountnewname.md
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/security/accounts/accountRename-schema.json
          example: " "    
    /permissions:
      type:
        postJSONWithoutJSId:
          description: Returns the permissions for this account like they would be if login in with the given account name
          description1: !include api/documentation/security/identityService/identityServiceName.md
          description2: !include api/documentation/security/account/accountName.md
          description3: " "
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/security/accounts/accountFilter-schema.json
          schema200: !include api/schemas/security/securityConfiguration/permissions-schema.json
          example: " "                
    /changepassword:
      type:
        postJSONWithOkWithoutJSId:
          description: Changes the password for the given account
          description1: !include api/documentation/security/identityService/identityServiceName.md
          description2: !include api/documentation/security/account/accountName.md
          description3: !include api/documentation/security/account/changepassword/password.md
          description4: !include api/documentation/security/account/changepassword/repeatedPassword.md
          description5: !include api/documentation/security/account/changepassword/oldPassword.md
          description6: !include api/documentation/security/account/forcepasswordchange.md
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/security/accounts/accountChangePassword-schema.json
          example: " "
          
  /folders:
    type:
      postJSONWithoutJSId:
        description: Returns a collection of folders for the given role and Controller ID
        description1: !include api/documentation/security/identityService/identityServiceName.md
        description2: !include api/documentation/security/folder/roleName.md
        description3: !include api/documentation/security/folder/controllerId.md
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/security/folders/folderListFilter-schema.json
        schema200: !include api/schemas/security/folders/folders-schema.json
        example: " "
        example200: " "  
    /store:
      type:
        postJSONWithOkWithoutJSId:
          description: Stores folders to a given role and Controller ID
          description1: !include api/documentation/security/identityService/identityServiceName.md
          description2: !include api/documentation/security/folder/store/roleName.md
          description3: !include api/documentation/security/folder/store/controllerId.md
          description4: !include api/documentation/security/folder/store/folders.md
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/security/folders/folders-schema.json
          example: " "          
    /delete:
      type:
        postJSONWithOkWithoutJSId:
          description: Deletes folders from a given role and Controller ID
          description1: !include api/documentation/security/identityService/identityServiceName.md
          description2: !include api/documentation/security/folder/delete/roleName.md
          description3: !include api/documentation/security/folder/delete/controllerId.md
          description4: !include api/documentation/security/folder/delete/folderNames.md
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/security/folders/foldersFilter-schema.json
          example: " "          
    
        
  /folder:
    type:
      postJSONWithoutJSId:
        description: Returns a folder
        description1: !include api/documentation/security/identityService/identityServiceName.md
        description2: !include api/documentation/security/folder/roleName.md
        description3: !include api/documentation/security/folder/controllerId.md
        description4: !include api/documentation/security/folder/folderName.md
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/security/folders/folderFilter-schema.json
        schema200: !include api/schemas/security/folders/folderItem-schema.json
        example: " "
        example200: " "          
                    
    /rename:
      type:
        postJSONWithOkWithoutJSId:
          description: Renames a folder   
          description1: !include api/documentation/security/identityService/identityServiceName.md
          description2: !include api/documentation/security/folder/rename/folderoldname.md
          description3: !include api/documentation/security/folder/rename/foldernew.md
          description4: !include api/documentation/security/folder/rename/controllerId.md
          description5: !include api/documentation/security/folder/rename/roleName.md
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/security/folders/folderRename-schema.json
          example: " "    
               

  /identityservices:
    type:
      postJSONWithoutJSId:
        description: Returns a collection of Identity Services
        description1: !include api/documentation/security/identityServices/identityServiceName.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/security/identityServices/identityServiceFilter-schema.json
        schema200: !include api/schemas/security/identityServices/identityServices-schema.json
        example: " "
        example200: " "
        
    /reorder:
      type:
        postJSONWithOkWithoutJSId:
          description: Reorders the Identity Services 
          description1: !include api/documentation/security/identityServices/identityServiceNames.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/security/identityServices/identityServicesFilter-schema.json
          example: " "                  
  /identityservice:
    type:
      postJSONWithoutJSId:
        description: Returns an Identity Service
        description1: !include api/documentation/security/identityService/identityServiceName.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/security/identityServices/identityServiceFilter-schema.json
        schema200: !include api/schemas/security/identityServices/identityService-schema.json
        example: " "
        example200: " "
    /store:
      type:
        postJSONWithOkWithoutJSId:
          description: Stores an Identity Service
          description1: !include api/documentation/security/identityService/identityServiceName.md
          description2: !include api/documentation/security/identityService/identityServiceType.md
          description3: !include api/documentation/security/identityService/disabled.md
          description4: !include api/documentation/security/identityService/required.md
          description5: !include api/documentation/security/identityService/ordering.md
          description6: !include api/documentation/security/identityService/singleFactorCert.md
          description7: !include api/documentation/security/identityService/singleFactorPwd.md
          description8: " " 
          description9: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/security/identityServices/identityService-schema.json
          example: " "
    /delete:
      type:
        postJSONWithOkWithoutJSId:
          description: Deletes an Identity Service
          description1: !include api/documentation/security/identityService/identityServiceName.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/security/identityServices/identityServiceFilter-schema.json
          example: " "
    /rename:
      type:
        postJSONWithOkWithoutJSId:
          description: Renames an Identity Service
          description1: !include api/documentation/security/identityService/identityserviceoldname.md
          description2: !include api/documentation/security/identityService/identityservicenewname.md
          description3: " "
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/security/identityServices/identityServiceRename-schema.json
          example: " "
  /permissions:
    type:
      postJSONWithoutJSId:
        description: Returns a collection of permissions for the given role and Controller ID
        description1: !include api/documentation/security/identityService/identityServiceName.md
        description2: !include api/documentation/security/permission/roleName.md
        description3: !include api/documentation/security/permission/controllerId.md
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/security/permissions/permissionListFilter-schema.json
        schema200: !include api/schemas/security/permissions/permissions-schema.json
        example: " "
        example200: " "  
    /store:
      type:
        postJSONWithOkWithoutJSId:
          description: Stores permissions to a given role and Controller ID
          description1: !include api/documentation/security/identityService/identityServiceName.md
          description2: !include api/documentation/security/permission/store/roleName.md
          description3: !include api/documentation/security/permission/store/controllerId.md
          description4: !include api/documentation/security/permission/store/permissions.md
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/security/permissions/permissions-schema.json
          example: " "          
    /delete:
      type:
        postJSONWithOkWithoutJSId:
          description: Delete permissions from a given role and Controller ID
          description1: !include api/documentation/security/identityService/identityServiceName.md
          description2: !include api/documentation/security/permission/delete/roleName.md
          description3: !include api/documentation/security/permission/delete/controllerId.md
          description4: !include api/documentation/security/permission/delete/permissionPaths.md
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/security/permissions/permissionsFilter-schema.json
          example: " "          
    
        
  /permission:
    type:
      postJSONWithoutJSId:
        description: Returns a permission
        description1: !include api/documentation/security/identityService/identityServiceName.md
        description2: !include api/documentation/security/permission/roleName.md
        description3: !include api/documentation/security/permission/controllerId.md
        description4: !include api/documentation/security/permission/permissionPath.md
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/security/permissions/permissionFilter-schema.json
        schema200: !include api/schemas/security/permissions/permissionItem-schema.json
        example: " "
        example200: " "          
                    
    /rename:
      type:
        postJSONWithOkWithoutJSId:
          description: Renames a permission   
          description1: !include api/documentation/security/identityService/identityServiceName.md
          description2: !include api/documentation/security/permission/rename/oldPermissionPath.md
          description3: !include api/documentation/security/permission/rename/permissionnew.md
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/security/permissions/permissionRename-schema.json
          example: " "    
                       
                       
  /roles:
    type:
      postJSONWithoutJSId:
        description: Returns a collection of roles for the given Identity Service
        description1: !include api/documentation/security/identityService/identityServiceName.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/security/roles/roleListFilter-schema.json
        schema200: !include api/schemas/security/roles/roles-schema.json
        example: " "
        example200: " "  
   
    /delete:
      type:
        postJSONWithOkWithoutJSId:
          description: Deletes roles from a given Identity Service
          description1: !include api/documentation/security/identityService/identityServiceName.md
          description2: !include api/documentation/security/role/delete/roleNames.md
          description3: " "
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/security/roles/rolesFilter-schema.json
          example: " "          
    /reorder:
      type:
        postJSONWithOkWithoutJSId:
          description: Reorders the roles for a given Identity Service
          description1: !include api/documentation/security/identityService/identityServiceName.md
          description2: !include api/documentation/security/role/reorder/roleNames.md
          description3: " "
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/security/roles/rolesFilter-schema.json
          example: " "                  
    
        
  /role:
    type:
      postJSONWithoutJSId:
        description: Returns a role
        description1: !include api/documentation/security/identityService/identityServiceName.md
        description2: !include api/documentation/security/role/roleName.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/security/roles/roleFilter-schema.json
        schema200: !include api/schemas/security/roles/role-schema.json
        example: " "
        example200: " "     
             

    /store:
      type:
        postJSONWithOkWithoutJSId:
          description: Stores roles to a given Identity Service
          description1: !include api/documentation/security/identityService/identityServiceName.md
          description2: !include api/documentation/security/role/store/roleName.md
          description3: !include api/documentation/security/role/store/ordering.md
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/security/roles/roleStore-schema.json
          example: " "                       
                    
    /rename:
      type:
        postJSONWithOkWithoutJSId:
          description: Renames a role   
          description1: !include api/documentation/security/identityService/identityServiceName.md
          description2: !include api/documentation/security/role/rename/roleoldname.md
          description3: !include api/documentation/security/role/rename/rolenewname.md
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/security/roles/roleRename-schema.json
          example: " "                    

  /blockedAccounts:
    type:
      postJSONWithoutJSId:
        description: Returns a collection of blocked Accounts
        description1: !include api/documentation/common/dateFrom.md
        description2: !include api/documentation/common/dateTo.md
        description3: !include api/documentation/common/timeZone.md
        description4: !include api/documentation/audit/accountName.md
        description200: " "
        schema: !include api/schemas/security/blocklist/blockedAccountsFilter-schema.json
        schema200: !include api/schemas/security/blocklist/blockedAccounts-schema.json
        example: " "
        example200: " "  
    /delete:
      type:
        postJSONWithOkWithoutJSId:
          description: Deletes blocked accounts from the list of blocked accounts
          description1: !include api/documentation/security/blocklist/delete/accountNames.md
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/security/blocklist/blockedAccountsDeleteFilter-schema.json
          example: " "          
 
        
    
  /blockedAccount/store:
      type:
        postJSONWithOkWithoutJSId:
          description: Stores a blocked account
          description1: !include api/documentation/security/blocklist/store/accountName.md
          description2: !include api/documentation/security/blocklist/store/notice.md
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/security/blocklist/blockedAccount-schema.json
          example: " "    

  /sessions:
    type:
      postJSONWithoutJSId:
        description: Returns a collection of active sessions
        description1: !include api/documentation/audit/accountName.md
        description200: " "
        schema: !include api/schemas/security/sessions/sessionsFilter-schema.json
        schema200: !include api/schemas/security/sessions/sessions-schema.json
        example: " "
        example200: " "  
    /cancel:
      type:
        postJSONWithOkWithoutJSId:
          description: Cancel sessions 
          description1: !include api/documentation/security/session/cancel/accountNames.md
          description2: !include api/documentation/security/session/cancel/ids.md
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/security/sessions/sessionsCancelFilter-schema.json
          example: " "          
          

/inventory:
  description: This is not an API call. Use its children!!

  /{objectType}/validate:
    type: error
    post:
      description: !include api/documentation/inventory/validate.md
      body:
        application/json:
      responses:
        200:
          body:
            application/json:
              schema: !include api/schemas/inventory/validate-schema.json
        420:
          body:
            application/json:
        440:
          body:
            application/json:

  /calendar/dates:
    type:
      postJSONWithoutJSId:
        description: Gets dates of a calendar
        description1: !include api/documentation/calendar/calendarPathOrObject.md
        description2: " "
        description3: !include api/documentation/calendar/dateFrom.md
        description4: !include api/documentation/calendar/dateTo.md
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/calendar/calendarDatesFilter-schema.json
        example: !include api/examples/calendar/calendarDates-example.json
        schema200: !include api/schemas/calendar/dates-schema.json
        example200: TODO

  /copy:
    type:
      postJSONWithoutJSId:
        description: Copies inventory object
        description1: !include api/documentation/inventory/idOrPathAndType.md
        description2: !include api/documentation/inventory/newPath.md
        description3: !include api/documentation/inventory/shallowCopy.md
        description4: !include api/documentation/inventory/suffixPrefix4copy.md
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: !include api/documentation/audit/auditLog.md
        description200: !include api/documentation/inventory/newObject.md
        schema: !include api/schemas/inventory/copy/request-filter-schema.json
        example: !include api/examples/inventory/rename-example.json
        schema200: !include api/schemas/inventory/common/response-newPath-schema.json
        example200: " "

  /delete_draft:
    type:
      postJSONWithoutJSId:
        description: Reverts draft configuration of an inventory object
        description1: !include api/documentation/inventory/idsOrPathsAndTypes.md
        description2: " "
        description3: " "
        description4: " "
        description5: !include api/documentation/audit/auditLog.md
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/inventory/common/request-filters-schema.json
        example: !include api/examples/inventory/pathsTypes-example.json
        schema200: !include api/schemas/inventory/delete/response-item-schema.json
        example200: !include api/examples/inventory/deleteDraft-response-example.json

  /delete_draft/folder:
    type:
      postJSONWithoutJSId:
        description: Reverts draft configuration of inventory objects by folder
        description1: !include api/documentation/inventory/path.md
        description2: " "
        description3: " "
        description4: " "
        description5: !include api/documentation/audit/auditLog.md
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/inventory/common/request-folder-schema.json
        example: TODO
        schema200: !include api/schemas/inventory/delete/response-item-schema.json
        example200: !include api/examples/inventory/deleteDraft-response-example.json

  /deployable:
    type:
      postJSONWithoutJSId:
        description: Gets deployable object
        description1: !include api/documentation/inventory/idOrPathAndDeployableType.md
        description2: !include api/documentation/inventory/onlyValidObjects.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: !include api/documentation/inventory/withDeployed.md
        description8: " "
        description9: " "
        description10: " "
        description200: !include api/documentation/inventory/deployable.md
        schema: !include api/schemas/inventory/deploy/request-deployable-schema.json
        example: TODO
        schema200: !include api/schemas/inventory/deploy/response-deployable-schema.json
        example200: TODO

  /deployables:
    type:
      postJSONWithoutJSId:
        description: Gets deployable objects
        description1: !include api/documentation/inventory/folder.md
        description2: !include api/documentation/common/recursive.md
        description3: !include api/documentation/inventory/deployableTypes.md
        description4: !include api/documentation/inventory/onlyValidObjects.md
        description5: " "
        description6: !include api/documentation/inventory/withRemovedObjects.md
        description7: !include api/documentation/inventory/withDeployed.md
        description8: !include api/documentation/inventory/controllerId.md
        description9: " "
        description10: " "
        description200: !include api/documentation/inventory/deployables.md
        schema: !include api/schemas/inventory/deploy/request-deployables-schema.json
        example: !include api/examples/inventory/deployables-request-example.json
        schema200: !include api/schemas/inventory/deploy/response-deployables-schema.json
        example200: !include api/examples/inventory/deployables-response-example.json

  /deployment:
    description: This is not an API call. Use child urls instead!

    /deploy:
      type:
        postJSONWithOkWithoutJSId:
          description: Signs and deploys objects
          description1: !include api/documentation/publish/deployFilter.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/publish/deploy-schema.json
          example: !include api/examples/publish/deploy-example.json

    /history:
      type:
        postForShowDepHistory:
          description: Reads the deployment history
          description1: !include api/documentation/publish/showDepHistory.md
          schema: !include api/schemas/publish/showDepHistoryFilter-schema.json
          schema200: !include api/schemas/publish/depHistory-schema.json
          example: !include api/examples/publish/showDepHistory-example.json
          example200: !include api/examples/publish/showDepHistoryResponse-example.json

    /import_deploy:
      type:
        postForImportDeploy:
          description: Uploads archive file (*.zip, *.tar.gz) and deploys objects
          schema: !include api/schemas/publish/importDeployFilter-schema.json
          example: !include api/examples/publish/publishImportDeploy-example.json

    /revoke:
      type:
        postJSONWithOkWithoutJSId:
          description: Revokes deployed objects from specified controllers only.
          description1: !include api/documentation/publish/revokeFilter.md
          description2: !include api/documentation/inventory/cancelOrdersDate.md
          description3: " "
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/publish/revoke-schema.json
          example: !include api/examples/publish/revoke-example.json

    /redeploy:
      type:
        postJSONWithOkWithoutJSId:
          description: Redeploys as set of deployable objects from the deployment history to the given Controller
          description1: !include api/documentation/publish/redeployFilter.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/publish/redeployFilter-schema.json
          example: !include api/examples/publish/redeployFilter-example.json

    /synchronize:
      type:
        postJSONWithOkWithoutJSId:
          description: Deploys the latest version of all deployable objects from the deployment history to the specified Controller that are not known in the Controller but have been deployed before
          description1: !include api/documentation/publish/syncFilter.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/publish/redeployFilter-schema.json
          example: !include api/examples/publish/redeployFilter-example.json

  /export:
    get:
    type:
      postForExport:
        description: Provides archive file (zip, tar.gz) to download unsigned JSON files
        description1: !include api/documentation/publish/exportFilterPost.md
        schema: !include api/schemas/publish/exportFilter-schema.json
        example: !include api/examples/publish/publishExport-example.json
    /folder:
      type:
        postForExport:
          description: Provides archive file (zip, tar.gz) to download unsigned JSON files
          description1: !include api/documentation/publish/folder/exportFolder.md
          schema: !include api/schemas/publish/folder/exportFolderFilter-schema.json
          example: !include api/examples/publish/folder/exportFolder-example.json

  /favorites:
    type: 
      postJSONWithoutJSId:
        description: Gets favorites
        description1: !include api/documentation/favorite/favoritesFilter.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: !include api/documentation/favorite/favorites200.md
        schema: !include api/schemas/favorite/readFavoritesFilter-schema.json
        example: " "
        schema200: !include api/schemas/favorite/favorites-schema.json
        example200: " "
  
    /delete:
      type:
        postJSONWithOkWithoutJSId:
          description: Deletes favorites
          description1: !include api/documentation/favorite/favoriteIdentifiers.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          audit: " "
          schema: !include api/schemas/favorite/identifiers-schema.json
          example: !include api/examples/favorite/identifiers-example.json
        
    /make_private:
      type:
        postJSONWithOkWithoutJSId:
          description: Set own shared favorites as not shared
          description1: !include api/documentation/favorite/favoriteIdentifiers.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          audit: " "
          schema: !include api/schemas/favorite/identifiers-schema.json
          example: !include api/examples/favorite/identifiers-example.json
        
    /ordering:
      type:
        postJSONWithOkWithoutJSId:
          description: Change the order of the favorites
          description1: !include api/documentation/favorite/favoriteIdentifier.md
          description2: !include api/documentation/favorite/predecessorFavorite.md
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          audit: " "
          schema: !include api/schemas/favorite/orderingFavorite-schema.json
          example: " "
        
    /rename:
      type:
        postJSONWithOkWithoutJSId:
          description: renames favorites
          description1: !include api/documentation/favorite/favoriteRenameIdentifiers.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          audit: " "
          schema: !include api/schemas/favorite/renameFavorites-schema.json
          example: " "
          
    /share:
      type:
        postJSONWithOkWithoutJSId:
          description: Shares own favorites for other accounts
          description1: !include api/documentation/favorite/favoriteIdentifiers.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          audit: " "
          schema: !include api/schemas/favorite/identifiers-schema.json
          example: !include api/examples/favorite/identifiers-example.json
        
    /store:
      type:
        postJSONWithOkWithoutJSId:
          description: Stores favorites
          description1: !include api/documentation/favorite/favorites.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          audit: " "
          schema: !include api/schemas/favorite/storeFavorites-schema.json
          example: " "
        
    /take_over:
      type:
        postJSONWithOkWithoutJSId:
          description: Takes over shared favorites from other accounts
          description1: !include api/documentation/favorite/favoriteAccountIdentifiers.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          audit: " "
          schema: !include api/schemas/favorite/sharedIdentifiers-schema.json
          example: !include api/examples/favorite/sharedIdentifiers-example.json  
        
  /import:
    type:
      postForUploadUnsigned:
        description: Uploads archive file (zip, tar.gz) with unsigned JSON files of deployable and releasable objects
        schema: !include api/schemas/publish/importFilter-schema.json
        example: !include api/examples/publish/publishImport-example.json

  /job/update:
    type:
      postJSONWithoutJSId:
        description: Updates a job from job templates
        description1: !include api/documentation/jobTemplate/filteredByJob.md
        description2: " "
        description3: " "
        description4: !include api/documentation/jobTemplate/overwrite.md
        description5: !include api/documentation/audit/auditLog.md
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
#        description200: !include api/documentation/jobTemplate/report.md
        schema: !include api/schemas/jobTemplate/propagate/jobPropagateFilter-schema.json
        example: " "
        schema200: !include api/schemas/jobTemplate/propagate/jobReport-schema.json
        example200: " "
        
  /path:
    type:
      postJSONWithoutJSId:
        description: Delivers the path of an object, specified by its name and object type
        description1: !include api/documentation/inventory/pathFilter.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/inventory/path/pathFilter-schema.json
        example: !include api/examples/inventory/pathFilter-example.json
        schema200: !include api/schemas/inventory/path/pathResponse-schema.json
        example200: !include api/examples/inventory/pathResponse-example.json

  /read/configuration:
    type:
      postJSONWithoutJSId:
        description: Reads configuration of an inventory object
        description1: !include api/documentation/inventory/idOrPathAndType.md
        description2: !include api/documentation/inventory/commitId.md
        description3: !include api/documentation/inventory/controllerId.md
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: !include api/documentation/inventory/configuration-response.md
        schema: !include api/schemas/inventory/read/request-filter-schema.json
        example: TODO
        schema200: !include api/schemas/inventory/configurationObject-schema.json
        example200: TODO

  /read/folder:
    type:
      postJSONWithoutJSId:
        description: Reads folder content
        description1: !include api/documentation/inventory/path.md
        description2: !include api/documentation/inventory/objectTypesWithoutFolder.md
        description3: !include api/documentation/common/recursive.md
        description4: !include api/documentation/inventory/onlyValidObjects.md
        description5: !include api/documentation/inventory/controllerId.md
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/inventory/common/request-folder-schema.json
        example: TODO
        schema200: !include api/schemas/inventory/common/response-folder-schema.json
        example200: TODO
        
  /read/order/positions:
    type:
      postJSONWithoutJSId:
        description: Reads available positions inside a Workflow for Orders in a Schedule configuration
        description1: !include api/documentation/inventory/workflowPath.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/inventory/read/request-workflow-filter-schema.json
        example: TODO
        schema200: !include api/schemas/order/ordersPositions-schema.json
        example200: TODO

  /release:
    type:
      postJSONWithOkWithoutJSId:
        description: Releases objects
        description1: !include api/documentation/inventory/releaseAddOrdersDate.md
        description2: !include api/documentation/inventory/updateRelease.md
        description3: !include api/documentation/inventory/releaseIdOrPathAndReleasableType.md
        description4: !include api/documentation/inventory/deleteRelease.md
        description5: !include api/documentation/inventory/releaseIdOrPathAndReleasableType.md
        audit: !include api/documentation/audit/auditLog.md
        schema: !include api/schemas/inventory/release/release-schema.json
        example: TODO
    post:
      responses:
        419:

  /releasable:
    type:
      postJSONWithoutJSId:
        description: Gets releasable objects
        description1: !include api/documentation/inventory/idOrPathAndReleasableType.md
        description2: !include api/documentation/inventory/onlyValidObjects.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: !include api/documentation/inventory/withReleased.md
        description8: " "
        description9: " "
        description10: " "
        description200: !include api/documentation/inventory/releasable.md
        schema: !include api/schemas/inventory/release/request-releasable-schema.json
        example: TODO
        schema200: !include api/schemas/inventory/release/response-releasable-schema.json
        example200: TODO

  /releasables:
    type:
      postJSONWithoutJSId:
        description: Gets releasable objects
        description1: !include api/documentation/inventory/folder.md
        description2: !include api/documentation/common/recursive.md
        description3: !include api/documentation/inventory/releasableTypes.md
        description4: !include api/documentation/inventory/onlyValidObjects.md
        description5: " "
        description6: !include api/documentation/inventory/withRemovedObjects.md
        description7: !include api/documentation/inventory/withReleased.md
        description8: " "
        description9: " "
        description10: " "
        description200: !include api/documentation/inventory/releasables.md
        schema: !include api/schemas/inventory/release/request-releasables-schema.json
        example: TODO
        schema200: !include api/schemas/inventory/release/response-releasables-schema.json
        example200: TODO

    /recall:
      type:
        postJSONWithOkWithoutJSId:
          description: Recalls an array of already released objects.
          description1: !include api/documentation/inventory/releasableRecallFilter.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          schema: !include api/schemas/inventory/release/releasableRecallFilter-schema.json
          example: !include api/examples/inventory/releasableRecallFilter-example.json 
        
  /remove:
    type:
      postJSONWithOkWithoutJSId:
        description: Removes configurations of inventory objects
        description1: !include api/documentation/inventory/idsOrPathsAndTypes.md
        description2: !include api/documentation/inventory/cancelOrdersDate.md
        description3: " "
        description4: " "
        description5: " "
        audit: !include api/documentation/audit/auditLog.md
        schema: !include api/schemas/inventory/delete/request-filters-schema.json
        example: !include api/examples/inventory/pathsTypes-example.json

  /remove/folder:
    type:
      postJSONWithOkWithoutJSId:
        description: Removes folder of inventory objects
        description1: !include api/documentation/inventory/path.md
        description2: !include api/documentation/inventory/cancelOrdersDate.md
        description3: " "
        description4: " "
        description5: " "
        audit: !include api/documentation/audit/auditLog.md
        schema: !include api/schemas/inventory/delete/request-folder-schema.json
        example: TODO

  /rename:
    type:
      postJSONWithoutJSId:
        description: Renames/Moves inventory object
        description1: !include api/documentation/inventory/idOrPathAndType.md
        description2: !include api/documentation/inventory/newPath.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: !include api/documentation/audit/auditLog.md
        description200: !include api/documentation/inventory/newObject.md
        schema: !include api/schemas/inventory/rename/request-filter-schema.json
        example: !include api/examples/inventory/rename-example.json
        schema200: !include api/schemas/inventory/common/response-newPath-schema.json
        example200: " "

  /replace:
    type:
      postJSONWithOkWithoutJSId:
        description: Searches/replaces names of inventory objects
        description1: !include api/documentation/inventory/idsOrPathsAndTypes.md
        description2: !include api/documentation/inventory/replace.md
        description3: " "
        description4: " "
        description5: " "
        audit: !include api/documentation/audit/auditLog.md
        schema: !include api/schemas/inventory/replace/request-filters-schema.json
        example: !include api/examples/inventory/replaces-example.json

  /replace/folder:
    type:
      postJSONWithOkWithoutJSId:
        description: Searches/replaces object names of an inventory folder content
        description1: !include api/documentation/inventory/path.md
        description2: !include api/documentation/inventory/replace.md
        description3: " "
        description4: " "
        description5: " "
        audit: !include api/documentation/audit/auditLog.md
        schema: !include api/schemas/inventory/replace/request-folder-schema.json
        example: !include api/examples/inventory/replace-example.json

  /repository:
    description: This is not an API call. Use child urls instead!
    
    /git:
      description: This is not an API call. Use child urls instead!
      
      /add:
        type:
          postJSONWithoutJSId:
            description: Adds all unstaged changes (tracked or untracked) to the local repositories staging area.
            description1: !include api/documentation/publish/git/commands/commonFilter.md
            description2: " "
            description3: " "
            description4: " "
            description5: " "
            audit: !include api/documentation/audit/auditLog.md
            schema: !include api/schemas/publish/git/commands/commonFilter-schema.json
            example: !include api/examples/publish/git/commands/commonFilter-example.json
            schema200: !include api/schemas/publish/git/commands/commandResponse-schema.json
            example200: !include api/examples/publish/git/commands/commandResponse-example.json

      /checkout:
        type:
          postJSONWithoutJSId:
            description: Checkout of a specific branch or tag in a local repository folder.
            description1: !include api/documentation/publish/git/commands/checkoutFilter.md
            description2: " "
            description3: " "
            description4: " "
            description5: " "
            audit: !include api/documentation/audit/auditLog.md
            schema: !include api/schemas/publish/git/commands/checkoutFilter-schema.json
            example: !include api/examples/publish/git/commands/checkoutFilter_tag-example.json
            schema200: !include api/schemas/publish/git/commands/commandResponse-schema.json
            example200: !include api/examples/publish/git/commands/commandResponse-example.json

      /clone:
        type:
          postJSONWithoutJSId:
            description: Clone of a remote repository to a local repository folder.
            description1: !include api/documentation/publish/git/commands/cloneFilter.md
            description2: " "
            description3: " "
            description4: " "
            description5: " "
            audit: !include api/documentation/audit/auditLog.md
            schema: !include api/schemas/publish/git/commands/cloneFilter-schema.json
            example: !include api/examples/publish/git/commands/cloneFilter-example.json
            schema200: !include api/schemas/publish/git/commands/commandResponse-schema.json
            example200: !include api/examples/publish/git/commands/commandResponse-example.json

      /commit:
        type:
          postJSONWithoutJSId:
            description: Commit of all staged changes to the local repository.
            description1: !include api/documentation/publish/git/commands/commitFilter.md
            description2: " "
            description3: " "
            description4: " "
            description5: " "
            audit: !include api/documentation/audit/auditLog.md
            schema: !include api/schemas/publish/git/commands/commitFilter-schema.json
            example: !include api/examples/publish/git/commands/commitFilter-example.json
            schema200: !include api/schemas/publish/git/commands/commandResponse-schema.json
            example200: !include api/examples/publish/git/commands/commandResponse-example.json

      /credentials:
        type:
          postOnlyAccessToken:
            description: delivers git credentials for the current JOC account in dependence to the JOC Security Levels.
            description200: " "
            schema200: !include api/schemas/publish/git/gitCredentials-schema.json
            example200: !include api/examples/publish/git/gitCredentials-keyfile-example.json

        /add:
          type:
            postJSONWithOkWithoutJSId:
              description: Adds git credentials for the current JOC account in dependence to the JOC Security Levels.
              description1: !include api/documentation/publish/git/addCredentialsFilter.md
              description2: " "
              description3: " "
              description4: " "
              description5: " "
              audit: !include api/documentation/audit/auditLog.md
              schema: !include api/schemas/publish/git/addCredentialsFilter-schema.json
              example: !include api/examples/publish/git/addCredentialsFilter-example.json

        /remove:
          type:
            postJSONWithOkWithoutJSId:
              description: Removes git credentials for the current JOC account in dependence to the JOC Security Levels.
              description1: !include api/documentation/publish/git/removeCredentialsFilter.md
              description2: " "
              description3: " "
              description4: " "
              description5: " "
              audit: !include api/documentation/audit/auditLog.md
              schema: !include api/schemas/publish/git/removeCredentialsFilter-schema.json
              example: !include api/examples/publish/git/removeCredentialsFilter-example.json

      /pull:
        type:
          postJSONWithoutJSId:
            description: Pulls all recent changes from the remote repository. If merge conflicts prevent a successful pull, the conflicts have to be solved outside of JOC Cockpit.
            description1: !include api/documentation/publish/git/commands/commonFilter.md
            description2: " "
            description3: " "
            description4: " "
            description5: " "
            audit: !include api/documentation/audit/auditLog.md
            schema: !include api/schemas/publish/git/commands/commonFilter-schema.json
            example: !include api/examples/publish/git/commands/commonFilter-example.json
            schema200: !include api/schemas/publish/git/commands/commandResponse-schema.json
            example200: !include api/examples/publish/git/commands/commandResponse-example.json

      /push:
        type:
          postJSONWithoutJSId:
            description: Pushes all commited changes to the remote repository. If merge conflicts prevent a successful push, the conflicts have to be solved outside of JOC Cockpit.
            description1: !include api/documentation/publish/git/commands/commonFilter.md
            description2: " "
            description3: " "
            description4: " "
            description5: " "
            audit: !include api/documentation/audit/auditLog.md
            schema: !include api/schemas/publish/git/commands/commonFilter-schema.json
            example: !include api/examples/publish/git/commands/commonFilter-example.json
            schema200: !include api/schemas/publish/git/commands/commandResponse-schema.json
            example200: !include api/examples/publish/git/commands/commandResponse-example.json

    /read:
      type:
        postJSONWithoutJSId:
          description: reads from a local repository in ./resources/joc/repositories
          description1: !include api/documentation/publish/repository/readFromFilter.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          audit: " "
          schema: !include api/schemas/publish/repository/readFromRepositoryFilter-schema.json
          example: !include api/examples/publish/repository/readFromFilter_recursive_true-example.json
          schema200: !include api/schemas/publish/repository/response-folder-schema.json
          example200: !include api/examples/publish/repository/responseFolder_recursive_true-example.json

    /store:
      type:
        postJSONWithOkWithoutJSId:
          description: stores configurations to a local repository in ./resources/joc/repositories
          description1: !include api/documentation/publish/repository/copyToFilter.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/publish/repository/copyToRepositoryFilter-schema.json
          example: !include api/examples/publish/repository/copyToFilter_files-example.json

    /delete:
      type:
        postJSONWithOkWithoutJSId:
          description: deletes configurations from a local repository in ./resources/joc/repositories
          description1: !include api/documentation/publish/repository/deleteFromFilter.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/publish/repository/deleteFromRepositoryFilter-schema.json
          example: !include api/examples/publish/repository/deleteFromFilter_files-example.json

    /update:
      type:
        postJSONWithOkWithoutJSId:
          description: adds or updates configuration objects in JOC with configurations from the local repository
          description1: !include api/documentation/publish/repository/updateFromFilter.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/publish/repository/updateFromRepositoryFilter-schema.json
          example: !include api/examples/publish/repository/updateFromFilter_files-example.json

# IN PROGRESS
#  /revalidate:
#    type:
#      postWithoutJSONandJSId:
#      description: revalidates all configuration objects
#      description1: !include api/documentation/audit/auditLog.md
#      description2: " "
#      description200: reports changed objects in lists of valid and invalid ones
#      schema200: !include api/schemas/inventory/revalidate/response-schema.json
#      example200: " "
      
  /search:
    type:
      postJSONWithOptionalJSId:
        description: Searches inventory objects
        description1: !include api/documentation/inventory/search/search-folders.md
        description2: !include api/documentation/inventory/search/returnType.md
        description3: " "
        description4: " "
        description5: " "
        description6: !include api/documentation/inventory/search/advanched.md
        description7: !include api/documentation/inventory/search/advanched-workflow.md
        description8: !include api/documentation/inventory/search/advanched-lock.md
        description9: !include api/documentation/inventory/search/advanched-noticeboard.md
        description10: !include api/documentation/inventory/search/advanched-calendar.md
        description200: " "
        schema: !include api/schemas/inventory/search/request-search-filter-schema.json
        example: TODO
        schema200: !include api/schemas/inventory/search/response-search-schema.json
        example200: TODO
    
  /statistics:
    type:
      postOnlyId:
        description: |
            Summary with number of deployed<h5>
            * Jobs
            * Workflows
            * Locks
            * Notice Boards
            * File Watches
            * Schedules
            * Calendars
            </h5>
        description200: " "
        schema200: !include api/schemas/inventory/statistics-schema.json
        example200: !include api/examples/inventory/statistics-example.json
  /store:
    type:
      postJSONWithoutJSId:
        description: Stores inventory object
        description1: !include api/documentation/inventory/idOrPathAndType.md
        description2: " "
        description3: " "
        description4: !include api/documentation/inventory/valid.md
        description5: !include api/documentation/inventory/configuration-request.md
        description6: !include api/documentation/audit/auditLog.md
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: !include api/documentation/inventory/store-response.md
        schema: !include api/schemas/inventory/configurationObject-schema.json
        example: TODO
        schema200: !include api/schemas/inventory/configurationObject-schema.json
        example200: !include api/examples/inventory/store-response-example.json

  /trash:
    description: This is not an API call. Use its children!!

    /delete:
      type:
        postJSONWithOkWithoutJSId:
          description: Deletes discarded inventory objects
          description1: !include api/documentation/inventory/idsOrPathsAndTypes.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/inventory/common/request-filters-schema.json
          example: !include api/examples/inventory/pathsTypes-example.json

    /delete/folder:
      type:
        postJSONWithOkWithoutJSId:
          description: Deletes folder of discarded inventory objects
          description1: !include api/documentation/inventory/path.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/inventory/common/request-folder-schema.json
          example: TODO

    /read/configuration:
      type:
        postJSONWithoutJSId:
          description: Reads configuration of a discarded object
          description1: !include api/documentation/inventory/idOrPathAndTypeOrNameAndType.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          description200: !include api/documentation/inventory/configuration-response.md
          schema: !include api/schemas/inventory/common/request-filter-schema.json
          example: TODO
          schema200: !include api/schemas/inventory/configurationObject-schema.json
          example200: TODO

    /read/folder:
      type:
        postJSONWithoutJSId:
          description: Reads folder content
          description1: !include api/documentation/inventory/path.md
          description2: !include api/documentation/inventory/objectTypesWithoutFolder.md
          description3: !include api/documentation/common/recursive.md
          description4: !include api/documentation/inventory/onlyValidObjects.md
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          description200: " "
          schema: !include api/schemas/inventory/common/request-folder-schema.json
          example: TODO
          schema200: !include api/schemas/inventory/common/response-folder-schema.json
          example200: TODO

    /restore:
      type:
        postJSONWithoutJSId:
          description: Restore a discarded inventory object
          description1: !include api/documentation/inventory/idOrPathAndType.md
          description2: !include api/documentation/inventory/newRestorePath.md
          description3: " "
          description4: !include api/documentation/inventory/suffixPrefix4restore.md
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: !include api/documentation/audit/auditLog.md
          description200: !include api/documentation/inventory/newObject.md
          schema: !include api/schemas/inventory/restore/request-filter-schema.json
          example: !include api/examples/inventory/pathType-example.json
          schema200: !include api/schemas/inventory/common/response-newPath-schema.json
          example200: " "

  /validate/path:
    type:
      postJSONWithOkWithoutJSId:
        description: Checks the path of a configuration item
        description1: !include api/documentation/inventory/path.md
        description2: !include api/documentation/inventory/objectType-required.md
        description3: " "
        description4: " "
        description5: " "
        audit: " "
        schema: !include api/schemas/inventory/rename/request-filter-schema.json
        example: !include api/examples/inventory/pathType-example.json

  /validate/predicate:
    type: error
    post:
      description: <h2>Validates the predicate of an If instruction inside  Workflow</h2>
      body:
        text/plain:
      responses:
        200:
          body:
            application/json:
              schema: !include api/schemas/inventory/validate-schema.json
        420:
          body:
            application/json:
        440:
          body:
            application/json:

  /wizard/jobs:
    type: error
    post:
      description: |
        <h2>Gets JITL jobs</h2>
      responses:
        200:
          body:
            application/json:
              example: !include api/examples/inventory/jitljobs-example.json
              schema: !include api/schemas/wizard/wizard-jobs-schema.json
        420:
          body:
            application/json:
        440:
          body:
            application/json:

  /wizard/job:
    type:
      postJSONWithoutJSId:
        description: Gets JITL job with its parameters
        description1: !include api/documentation/docu/assignRefRequired.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/wizard/wizard-job-filter-schema.json
        example: |
          {
            "assignReference": "RenameFileJob"
          }
        schema200: !include api/schemas/wizard/wizard-job-schema.json
        example200: !include api/examples/inventory/jitljob-example.json
        
  /workflow/references:
    type:
      postJSONWithoutJSId:
        description: Gets references
        description1: !include api/documentation/inventory/references.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/inventory/references/request-filter-schema.json
        example: " "
        schema200: !include api/schemas/inventory/references/response-item-schema.json
        example200: TODO

  
  /workflows/update:
    type:
      postJSONWithoutJSId:
        description: Updates workflows from job templates
        description1: !include api/documentation/jobTemplate/filteredByWorkflowPaths.md
        description2: !include api/documentation/inventory/folder.md
        description3: !include api/documentation/common/recursive.md
        description4: !include api/documentation/jobTemplate/overwrite.md
        description5: !include api/documentation/audit/auditLog.md
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: !include api/documentation/jobTemplate/report.md
        schema: !include api/schemas/jobTemplate/propagate/workflowPropagateFilter-schema.json
        example: " "
        schema200: !include api/schemas/jobTemplate/propagate/report-schema.json
        example200: !include api/examples/jobTemplate/propagate-response-example.json

/job_template:
  type:
    postJSONWithoutJSId:
      description: Gets released job template
      description1: !include api/documentation/jobTemplate/jobTemplatePath.md
      description2: " "
      description3: " "
      description4: " "
      description5: " "
      description6: " "
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: " "
      schema: !include api/schemas/jobTemplate/jobTemplateFilter-schema.json
      schema200: !include api/schemas/jobTemplate/jobTemplate-schema.json
      example: " "
      example200: " "
  
  /state:
    type:
      postJSONWithoutJSId:
        description: Gets state of a used released job template
        description1: !include api/documentation/jobTemplate/jobTemplateRef.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/jobTemplate/jobTemplateStateFilter-schema.json
        schema200: !include api/schemas/jobTemplate/jobTemplateState-schema.json
        example: " "
        example200: " "

/job_templates:
  type:
    postJSONWithoutJSId:
      description: Gets released job templates
      description1: !include api/documentation/jobTemplate/filteredByJobTemplatePaths.md
      description2: " "
      description3: " "
      description4: " "
      description5: !include api/documentation/common/folders.md
      description6: !include api/documentation/common/compact.md
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: " "
      schema: !include api/schemas/jobTemplate/jobTemplatesFilter-schema.json
      schema200: !include api/schemas/jobTemplate/jobTemplates-schema.json
      example: " "
      example200: " "
  
  /propagate:
    type:
      postJSONWithoutJSId:
        description: Updates workflows that use released job templates
        description1: !include api/documentation/jobTemplate/propagateFilter.md
        description2: !include api/documentation/jobTemplate/overwrite.md
        description3: " "
        description4: " "
        description5: !include api/documentation/audit/auditLog.md
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: !include api/documentation/jobTemplate/report.md
        schema: !include api/schemas/jobTemplate/propagate/jobTemplatesPropagateFilter-schema.json
        schema200: !include api/schemas/jobTemplate/propagate/report-schema.json
        example: !include api/examples/jobTemplate/propagate-request-example.json
        example200: !include api/examples/jobTemplate/propagate-response-example.json
        
  /used:
    type:
      postJSONWithoutJSId:
        description: Gets workflows that use released job templates
        description1: !include api/documentation/jobTemplate/filteredByJobTemplatePaths.md
        description2: " "
        description3: " "
        description4: " "
        description5: !include api/documentation/common/folders.md
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/jobTemplate/jobTemplatesFilter-schema.json
        schema200: !include api/schemas/jobTemplate/usedBys-schema.json
        example: " "
        example200: !include api/examples/jobTemplate/usedby-example.json

/jobs/overview/summary:
  type:
    postJSONWithOptionalJSId:
      description: |
          Summary with number of<h5>
          * successful tasks
          * failed tasks
          </h5>
      description1: !include api/documentation/common/dateFrom.md
      description2: !include api/documentation/common/dateTo.md
      description3: !include api/documentation/common/timeZone.md
      description4: " "
      description5: " "
      description6: " "
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description11: " "
      description12: " "
      description13: " "
      description200: " "
      schema200: !include api/schemas/job/summary-schema.json
      schema: !include api/schemas/job/jobsFilter-schema.json
      example: |
          {
            "dateFrom": "1d"
          }
      example200: !include api/examples/job/summary-example.json

/joc:
  description: This is not an API call. Use its children!!
  /cluster:
    /delete_member:
      type:
        postJSONWithOkWithoutJSId:
          description: |
            Deletes a JOC cluster member from the Inventory
            <h5>The member has to be inactive and the last heartbeat has to be older than 1 minute</h5>
          description1: !include api/documentation/cluster/switch.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          audit: " "
          schema: !include api/schemas/cluster/switch-schema.json
          example: " "
    /restart:
      type:
        postJSONWithOkWithoutJSId:
          description: Restarts JOC services such as cluster, history, dailyplan, cleanup
          description1: !include api/documentation/cluster/restart.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          audit: " "
          schema: !include api/schemas/cluster/restart-schema.json
          example: " "
    /switch_member:
      type:
        postJSONWithOkWithoutJSId:
          description: Switches to an inactive JOC cluster member
          description1: !include api/documentation/cluster/switch.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          audit: " "
          schema: !include api/schemas/cluster/switch-schema.json
          example: " "

  /is_active:
    get:
    type:
      postOnlyAccessToken:
        description: Returns wether JOC node is active or not
        description200: ok = true exactly if it is active
        schema200: ok
        example200: |
          {
            "deliveryDate":"2020-05-05T21:13:35Z",
            "ok":true
          }
  /license:
    type:
      postWithoutJSONandJSId:
        description: shows information about the currently used SOS JS7 License
        description1: " "
        description2: " "
        schema200: !include api/schemas/joc/js7LicenseInfo-schema.json
        example200: !include api/examples/joc/js7LicenseInfo-example.json
  /log:
    type:
      postWithPlainResponse:
        description: Provides JOC Cockpit log (joc.log) as download
        description1: !include api/documentation/joc/filename.md
        description200: Content of JOC Cockpit log (joc.log) for download
        schema: !include api/schemas/joc/filename-schema.json

  /logs:
    type: error
    post:
      description: <h2>Gets a list of JOC Cockpit logs (joc.log)</h2>
      responses:
        200:
          description: " "
          body:
            application/json:
              schema: !include api/schemas/joc/filenames-schema.json

  /properties:
    type:
      postOnlyAccessToken:
        description: |
          Response contains some settings such as<h5>
          * pre-defined audit log comments
          * flag to force audit log comments
          * show/hide views
          </h5>
        description200: " "
        schema200: !include api/schemas/joc/properties-schema.json
        example200: !include api/examples/joc/properties-example.json
  
  /versions:
    type:
      postJSONWithoutJSId:
        description: Reads the versions of the specified JS7 components.
        description1: !include api/documentation/joc/versionsFilter.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/joc/versionsFilter-schema.json
        schema200: !include api/schemas/joc/versionResponse-schema.json
        example: !include api/examples/joc/versionsFilter-example.json
        example200: !include api/examples/joc/versionsResponse-example.json
        
      
/lock:
  type:
    postJSON:
      description: Gets a deployed lock
      description1: " "
      description2: " "
      description3: !include api/documentation/lock/lockPath.md
      description4: " "
      description5: !include api/documentation/common/compact.md
      description6: !include api/documentation/lock/limit.md
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: !include api/documentation/lock/locks.md
      schema: !include api/schemas/lock/lockFilter-schema.json
      schema200: !include api/schemas/lock/lock-schema.json
      example: TODO
      example200: TODO

/locks:
  type:
    postJSON:
      description: Returns deployed locks
      description1: " "
      description2: !include api/documentation/lock/lockPaths.md
      description3: !include api/documentation/common/folders.md
      description4: !include api/documentation/common/compact.md
      description5: !include api/documentation/lock/limit.md
      description6: " "
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: !include api/documentation/lock/locks.md
      schema: !include api/schemas/lock/locksFilter-schema.json
      schema200: !include api/schemas/lock/locks-schema.json
      example: TODO
      example200: !include api/examples/lock/locks.json
      
  /search:
    type:
      postJSON:
        description: Searches deployed locks
        description1: !include api/documentation/inventory/search/search-folders.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: !include api/documentation/inventory/search/advanched.md
        description7: !include api/documentation/inventory/search/advanched-workflow.md
        description8: " "
        description9: !include api/documentation/inventory/search/advanched-noticeboard.md
        description10: !include api/documentation/inventory/search/advanched-calendar.md
        description200: " "
        schema: !include api/schemas/inventory/search/request-deployed-search-filter-schema.json
        example: TODO
        schema200: !include api/schemas/inventory/search/response-search-schema.json
        example200: TODO

/monitoring:
  /notifications:
    type:
      postJSONWithOptionalJSId:
        description: Gets notifications
        description1: " "
        description2: " "
        description3: !include api/documentation/common/dateFrom.md
        description4: " "
        description5: !include api/documentation/common/timeZone.md
        description6: " "
        description7: " "
        description8: !include api/documentation/common/limit.md
        description9: " "
        description10: " "
        description11: " "
        description12: " "
        description13: " "
        description200: TODO
        schema: !include api/schemas/monitoring/notification/order/order-notifications-filter-schema.json
        schema200: !include api/schemas/monitoring/notification/order/order-notifications-answer-schema.json
        example: " "
        example200: " "
/notice:
  /board:
    type:
      postJSON:
        description: Gets a deployed notice board
        description1: " "
        description2: " "
        description3: !include api/documentation/board/boardPath.md
        description4: !include api/documentation/common/compact.md
        description5: !include api/documentation/board/limit.md
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: TODO
        schema: !include api/schemas/board/boardFilter-schema.json
        schema200: !include api/schemas/board/board-schema.json
        example: !include api/examples/noticeBoard/board-request-example.json
        example200: !include api/examples/noticeBoard/board-response-example.json

  /boards:
    type:
      postJSON:
        description: Gets deployed notice boards
        description1: " "
        description2: " "
        description3: !include api/documentation/common/folders.md
        description4: !include api/documentation/board/boardPaths.md
        description5: !include api/documentation/common/compact.md
        description6: !include api/documentation/board/limit.md
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: TODO
        schema: !include api/schemas/board/boardsFilter-schema.json
        schema200: !include api/schemas/board/boards-schema.json
        example: !include api/examples/noticeBoard/boards-request-example.json
        example200: !include api/examples/noticeBoard/boards-response-example.json
        
    /search:
      type:
        postJSON:
          description: Searches deployed notice boards
          description1: !include api/documentation/inventory/search/search-folders.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          description6: !include api/documentation/inventory/search/advanched.md
          description7: !include api/documentation/inventory/search/advanched-workflow.md
          description8: !include api/documentation/inventory/search/advanched-lock.md
          description9: " "
          description10: !include api/documentation/inventory/search/advanched-calendar.md
          description200: " "
          schema: !include api/schemas/inventory/search/request-deployed-search-filter-schema.json
          example: TODO
          schema200: !include api/schemas/inventory/search/response-search-schema.json
          example200: TODO

  /delete:
    type:
      postJSONWithOkResponse:
        description: Deletes Notice
        description1: !include api/documentation/board/deleteNotice.md
        description2: !include api/documentation/audit/auditLog.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        schema: !include api/schemas/board/modifyNotice-schema.json
        example: " "
  /post:
    type:
      postJSONWithOkResponse:
        description: Posts Notice
        description1: !include api/documentation/board/deleteNotice.md
        description2: !include api/documentation/board/endOfLife.md
        description3: !include api/documentation/audit/auditLog.md
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        schema: !include api/schemas/board/modifyNotice-schema.json
        example: " "

/notices/delete:
    type:
      postJSONWithOkResponse:
        description: Deletes Notices
        description1: !include api/documentation/board/deleteNotices.md
        description2: !include api/documentation/audit/auditLog.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        schema: !include api/schemas/board/modifyNotices-schema.json
        example: " "

/notification:
  type:
    postJSONWithoutJSId:
      description: Reads the configuration of the notifications
      description1: !include api/documentation/notification/readNotificationFilter.md
      description2: " "
      description3: " "
      description4: " "
      description5: " "
      description6: " "
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: " "
      schema: !include api/schemas/notification/readNotificationFilter-schema.json
      schema200: !include api/schemas/xmleditor/read/standard/read-standard-configuration-answer-schema.json
      example: !include api/examples/notification/readNotificationFilter-example.json
      example200: " "
  /delete:
    type:
      postJSONWithoutJSId:
        description: Deletes the configuration of the notifications
        description1: !include api/documentation/notification/deleteNotificationFilter.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: !include api/documentation/audit/auditLog.md
        description200: " "
        schema: !include api/schemas/notification/deleteNotificationFilter-schema.json
        schema200: !include api/schemas/xmleditor/read/standard/read-standard-configuration-answer-schema.json
        example: !include api/examples/notification/deleteNotificationFilter-example.json
        example200: " "
  /release:
    type:
      postJSONWithoutJSId:
        description: Releases the configuration of the notifications
        description1: !include api/documentation/notification/releaseNotificationFilter.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: !include api/documentation/audit/auditLog.md
        description200: " "
        schema: !include api/schemas/notification/releaseNotificationFilter-schema.json
        schema200: !include api/schemas/xmleditor/read/standard/read-standard-configuration-answer-schema.json
        example: !include api/examples/notification/deleteNotificationFilter-example.json
        example200: " "
  /store:
    type:
      postJSONWithoutJSId:
        description: Stores the configuration of the notifications
        description1: !include api/documentation/notification/storeNotificationFilter.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: !include api/documentation/audit/auditLog.md
        description200: " "
        schema: !include api/schemas/notification/storeNotificationFilter-schema.json
        schema200: !include api/schemas/xmleditor/store/store-configuration-answer-schema.json
        example: !include api/examples/notification/storeNotificationFilter-example.json
        example200: " "

/order:
  type:
    postJSON:
      description: order (volatile part)
      description1: " "
      description2: !include api/documentation/order/orderIdRequired.md
      description3: !include api/documentation/common/compact.md
      description4: " "
      description5: " "
      description6: " "
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: !include api/documentation/order/orders_v.md
      schema: !include api/schemas/order/orderFilter-schema.json
      schema200: !include api/schemas/order/order_v-schema.json
      example: !include api/examples/order/filteredOrder-example.json
      example200: TODO

  /history:
    type:
      postJSON:
        description: Order history of the specified history id from _reporting_
        description1: " "
        description2: " "
        description3: !include api/documentation/order/historyOrOrderId.md
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: TODO
        schema: orderHistoryFilter
        schema200: !include api/schemas/order/orderHistoryItemChildren-schema.json
        example: " "
        example200: !include api/examples/order/response-orderHistoryItemChilds-example.json
    post:
      responses:
        434:
     
  /log:
    type:
      postJSON:
        description: Order log
        description1: !include api/documentation/order/historyId.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: array of logEvents
        schema: orderHistoryFilter
        schema200: !include api/schemas/order/orderLog-schema.json
        example: " "
        example200: !include api/examples/order/log-example.json
    /running:
      type:
        postJSON:
          description: Order running log
          description1: " "
          description2: !include api/documentation/order/historyId.md
          description3: !include api/documentation/order/runningLog.md
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          schema200: !include api/schemas/order/orderLog-schema.json
          schema: !include api/schemas/order/orderRunningLogFilter-schema.json
          example: TODO
          example200: " "
    /download:
      type:
        postOrderLogWithPlainResponse:
          description: Provides order log as download
  /obstacles:
    type:
      postJSON:
        description: Gets obstacles
        description1: " "
        description2: " "
        description3: !include api/documentation/order/orderIdRequired.md
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/order/orderFilter-schema.json
        schema200: !include api/schemas/order/obstacle200-schema.json
        example: " "
        example200: !include api/examples/order/obstacle-example.json
  /variables:
    type:
      postJSON:
        description: Gets variables that were returned by the jobs before specified position
        description1: " "
        description2: " "
        description3: !include api/documentation/order/orderIdRequired.md
        description4: !include api/documentation/order/position.md
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: !include api/documentation/order/variables200.md
        schema: !include api/schemas/order/orderVariablesFilter-schema.json
        schema200: !include api/schemas/order/ordersPositions-schema.json
        example: !include api/examples/order/request-variables-example.json
        example200: !include api/examples/order/response-variables-example.json

/orders:
  type:
    postJSON:
      description: Returns a collection of orders filtered by workflow or order state
      description1: !include api/documentation/order/orderIds.md
      description2: !include api/documentation/workflow/filteredByWorkflows.md
      description3: !include api/documentation/common/folders.md
      description4: !include api/documentation/common/compact.md
      description5: !include api/documentation/common/regex.md
      description6: !include api/documentation/order/state.md
      description7: !include api/documentation/order/dateTo.md
      description8: !include api/documentation/common/limit.md
      description9: " "
      description10: " "
      description200: !include api/documentation/order/orders_v.md
      schema: !include api/schemas/order/ordersFilterV-schema.json
      schema200: !include api/schemas/order/orders_v-schema.json
      example: TODO
      example200: TODO
  /add:
    type:
      addOrder:
        audit: !include api/documentation/audit/auditLog.md
        
    /positions:
      type:
        postJSON:
          description: Gets common allowed workflow position for adding orders
          description1: !include api/documentation/workflow/workflowId.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          description200: " "
          schema200: !include api/schemas/order/ordersPositions-schema.json
          schema: !include api/schemas/workflow/workflowFilter-schema.json
          example: " "
          example200: " "
          
  /cancel:
    type:
      modifyOrder:
        description: Cancel orders
        dateToParam: !include api/documentation/calendar/dateTo.md
        timeZoneParam: !include api/documentation/orderManagement/timeZone.md
        signalParam: !include api/documentation/order/kill.md
        positionParam: " "
        variablesParam: " "
        cycleParam: " "
        audit: !include api/documentation/audit/auditLog.md
  /confirm:
    type:
      modifyOrder:
        description: Confirm prompting orders
        dateToParam: " "
        timeZoneParam: " "
        signalParam: " "
        positionParam: " "
        variablesParam: " "
        cycleParam: " "
        audit: !include api/documentation/audit/auditLog.md

  /history:
    type:
      postJSONWithOptionalJSId:
        description: Order history
        description1: !include api/documentation/order/filteredByOrders.md
        description2: !include api/documentation/order/excludeOrders.md
        description3: !include api/documentation/common/dateFrom.md
        description4: !include api/documentation/common/dateTo.md
        description5: !include api/documentation/common/completedDateFrom.md
        description6: !include api/documentation/common/completedDateTo.md
        description7: !include api/documentation/common/timeZone.md
        description8: !include api/documentation/order/patterns.md
        description9: !include api/documentation/common/folders.md
        description10: !include api/documentation/common/limit.md
        description11: !include api/documentation/common/historyStates.md
        description12: !include api/documentation/order/historyIds.md
        description13: " "
        description200: TODO
        schema: !include api/schemas/order/ordersFilter-schema.json
        schema200: !include api/schemas/order/orderHistory-schema.json
        example: !include api/examples/order/filteredOrders-example.json
        example200: !include api/examples/order/response-orderHistory-example.json
  /overview/snapshot:
      type:
        postJSON:
          description: |
            Summary with number of<h5>
            * pending orders
            * scheduled orders
            * running orders
            * orders in progress
            * suspended orders
            * failed orders
            * prompting orders
            * waiting orders
            * blocked orders
            * terminated orders
            </h5>
          description1: " "
          description2: !include api/documentation/workflow/filteredByWorkflows.md
          description3: " "
          description4: !include api/documentation/common/folders.md
          description5: " "
          description6: " "
          description7: !include api/documentation/order/dateTo.md
          description8: " "
          description9: " "
          description10: " "
          description200: " "
          schema: !include api/schemas/order/ordersFilterV-schema.json
          example: !include api/examples/controller/controllerParam-example.json
          schema200: !include api/schemas/order/snapshot-schema.json
          example200: !include api/examples/order/snapshot-example.json
  /overview/summary:
      type:
        postJSONWithOptionalJSId:
          description: |
            Summary with number of<h5>
            * successful orders
            * failed orders

            filtered by <code>dateFrom</code> parameter until now
            </h5>
          description1: !include api/documentation/common/dateFrom.md
          description2: !include api/documentation/common/dateTo.md
          description3: !include api/documentation/common/timeZone.md
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          description11: " "
          description12: " "
          description13: " "
          description200: " "
          schema200: !include api/schemas/order/summary-schema.json
          schema: !include api/schemas/order/ordersFilter-schema.json
          example: |
            {
              "dateFrom": "1d"
            }
          example200: !include api/examples/order/summary-example.json
  /remove_when_terminated:
    type:
      modifyOrder:
        description: Remove orders when terminated
        dateToParam: " "
        timeZoneParam: " "
        signalParam: " "
        positionParam: " "
        variablesParam: " "
        cycleParam: " "
        audit: !include api/documentation/audit/auditLog.md
  /resume:
    type:
      modifyOrder:
        description: Resume orders when suspended or failed
        dateToParam: " "
        timeZoneParam: " "
        signalParam: " "
        positionParam: !include api/documentation/order/position.md
        variablesParam: !include api/documentation/order/variables.md
        cycleParam: !include api/documentation/order/cycleEndTime.md
        audit: !include api/documentation/audit/auditLog.md
    /positions:
      type:
        postJSON:
          description: Gets common allowed workflow position for resuming orders
          description1: !include api/documentation/order/orderIdsRequired.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          description200: !include api/documentation/order/positions200.md
          schema200: !include api/schemas/order/ordersResumePositions-schema.json
          schema: modifyOrders
          example: !include api/examples/order/request-positions-example.json
          example200: !include api/examples/order/response-positions-example.json
  /suspend:
    type:
      modifyOrder:
        description: Suspend orders
        dateToParam: !include api/documentation/calendar/dateTo.md
        timeZoneParam: !include api/documentation/orderManagement/timeZone.md
        signalParam: !include api/documentation/order/kill.md
        positionParam: " "
        variablesParam: " "
        cycleParam: " "
        audit: !include api/documentation/audit/auditLog.md
        
        
/profile:
  description: This is not an API call. Use child urls instead!

  /prefs:
    type:
      postJSON:
        description: gets the preferences from the profile in JSON format 
        description1: !include api/documentation/security/account/accountName.md
        schema: !include api/schemas/profile/profileFilter-schema.json
        schema200: !include api/schemas/profile/profile-schema.json
    /store:
      type:
        postJSONWithOkResponse:
          description: Stores the prefs for a profile
          description1: !include api/documentation/security/account/accountName.md
          description2: !include api/documentation/profile/profileItem.md
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/profile/profile-schema.json
  /ca:
    type:
      postWithoutJSONandJSId:
        description: gets the stored CAs ECDSA private key and X509 certificate
        description1: " "
        description2: " "
        schema200: !include api/schemas/sign/jocKeyPair-schema.json
        example200: !include api/examples/publish/showKey-example.json

    /generate:
      type:
        postForGenerateKey:
          description: generates and stores a new CA ECDSA private key and a X509 certificate
          description1: !include api/documentation/publish/generateRootCA.md
          description2: " "
          audit: !include api/documentation/audit/auditLog.md
          description200: " "
          schema200: !include api/schemas/sign/jocKeyPair-schema.json
          example200: !include api/examples/publish/showKey-example.json
          schema: !include api/schemas/publish/generateCaFilter-schema.json
          example: !include api/examples/publish/generateRootCa-example.json

    /import:
      type:
        postForUploadSignedRootCa:
          description: |
            imports a CAs ECDSA Private Key or a X509 Certificate file(ASCII format only, no binary files)
            and stores the file content
          schema: !include api/schemas/publish/importRootCaFilter-schema.json
          example: " "

    /store:
      type:
        postJSONWithOkWithoutJSId:
          description: stores a new CAs ECDSA private key and/or a X509 certificate (PEM format only)
          description1: !include api/documentation/publish/setECPrivateKey.md
          description2: !include api/documentation/publish/setRootCaCertificate.md
          description3: " "
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/publish/setRootCa-schema.json
          example: !include api/examples/publish/setRootCa-example.json

  /key:
    type:
      postWithoutJSONandJSId:
        description: gets the stored public key or certificate (SecurityLevel HIGH) or the public key/certificate and private key (SecurityLevel LOW and MEDIUM)
        description1: " "
        description2: " "
        schema200: !include api/schemas/sign/jocKeyPair-schema.json
        example200: !include api/examples/publish/showKey-example.json

    /ca:
      type:
        postWithoutJSONandJSId:
          description: gets the stored signing CAs X509 certificate
          description1: " "
          description2: " "
          schema200: !include api/schemas/sign/jocKeyPair-schema.json
          example200: !include api/examples/publish/showKey-example.json

      /import:
        type:
          postForUploadSignedRootCa:
            description: |
              imports a signing CAs X509 Certificate file(ASCII format only, no binary files)
              and stores the file content
            schema: !include api/schemas/publish/importRootCaFilter-schema.json
            example: " "

      /store:
        type:
          postJSONWithOkWithoutJSId:
            description: stores a new signing CAs X509 certificate (PEM format only)
            description1: !include api/documentation/publish/setRootCaCertificate.md
            description2: " "
            description3: " "
            description4: " "
            description5: " "
            audit: !include api/documentation/audit/auditLog.md
            schema: !include api/schemas/publish/setRootCaForSigning-schema.json
            example: !include api/examples/publish/setRootCaForSigning-example.json

    /generate:
      type:
        postForGenerateKey:
          description: generates and stores a new private key (only for SecurityLevel LOW and MEDIUM)
          description1: !include api/documentation/publish/generateKeyValidUntil.md
          description2: !include api/documentation/publish/keyAlgorithm.md
          audit: !include api/documentation/audit/auditLog.md
          description200: " "
          schema200: !include api/schemas/sign/jocKeyPair-schema.json
          example200: !include api/examples/publish/showKey-example.json
          schema: !include api/schemas/publish/generateKey-schema.json
          example: !include api/examples/publish/generateKey-example.json

    /import:
      type:
        postForUploadSigned:
          description: |
            imports a Private Key, a Public Key or a Certificate file(ASCII format only, no binary files)
            and stores the file content
          schema: !include api/schemas/publish/importKeyFilter-schema.json
          example: " "
    /store:
      type:
        postJSONWithOkWithoutJSId:
          description: stores a new Public Key, a Certificate or Private key (ASCII format only)
          description1: !include api/documentation/publish/setKey.md
          description2: !include api/documentation/publish/setPrivateKey.md
          description3: !include api/documentation/publish/setPublicKey.md
          description4: !include api/documentation/publish/setCertificate.md
          description5: !include api/documentation/publish/setKeyAlgorithm.md
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/publish/setKey-schema.json
          example: !include api/examples/publish/setKey-example.json
    
/profiles:
 type:
    postJSON:
      description: Provide the list of profiles including the last login time. A profile is listed, when changed preferences, git credentials, favorites or signatures/keys are found.
      description1: !include api/documentation/security/identityServices/identityServiceName.md
      schema: !include api/schemas/security/identityServices/identityServiceFilter-schema.json
      schema200: !include api/schemas/profile/profiles-schema.json        

/profiles/delete:
    type:
      postJSONWithOkResponse:
        description: Deletes the profile for the accounts
        description1: !include api/documentation/security/account/delete/accountNames.md 
        description2: !include api/documentation/profile/complete.md
        schema: !include api/schemas/profile/profilesFilter-schema.json          


/schedule/runtime:
  type:
    postJSONWithoutJSId:
      description: Runtime periods of a Schedule
      description1: " "
      description2: " "
      description3: !include api/documentation/calendar/dateFrom.md
      description4: !include api/documentation/calendar/dateTo.md
      description5: !include api/documentation/orderManagement/timeZone.md
      description6: !include api/documentation/orderManagement/workingDayCalendar.md
      description7: !include api/documentation/orderManagement/nonWorkingDayCalendar.md
      description8: " "
      description9: " "
      description10: " "
      description200: Send singles starts or repeat intervals in UTC
      schema: !include api/schemas/orderManagement/scheduleDatesFilter-schema.json
      schema200: !include inventory/schemas/calendar/period-schema.json
      example: !include api/examples/orderManagement/runtime-example.json
      example200: !include api/examples/orderManagement/runtime200-example.json

/schedules:
    type:
      postJSON:
        description: Lists schedules for a given controller
        description1: !include api/documentation/dailyplan/schedules/dailyPlanSchedulesSelectorDef.md
        description2: !include api/documentation/dailyplan/schedules/folders.md
        description3: !include api/documentation/dailyplan/schedules/schedules.md
        description4: !include api/documentation/dailyplan/schedules/workflowPaths.md
        description5: !include api/documentation/dailyplan/schedules/controllerIds.md
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/orderManagement/orders/schedulesSelector-schema.json
        schema200: !include api/schemas/orderManagement/orders/schedulesList-schema.json
        example: " "
        example200: " "

/settings:
  type:
    postWithoutJSONandJSId:
      description: reads the global settings
      description1: " "
      description2: " "
      description200: " "
      schema200: !include api/schemas/configuration/configuration200-schema.json
      example200: " "
  /store:
    type:
      postJSONWithOkWithoutJSId:
        description: stores the global settings
        description1: !include api/documentation/settings/storeSettings.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        schema: !include api/schemas/settings/storeSettings-schema.json
        example: !include api/examples/settings/storeSettings-example.json

/task/log:
  type:
    postLog:
      description1: !include api/documentation/job/task.md
      description2: " "
      description3: " "
      schema: taskFilter
      example: TODO
      example200: !include api/examples/job/taskLog-example.txt
  /download:
    type:
      postTaskLogWithPlainResponse:
        description: Provides task log as download
  /running:
    type:
      postJSON:
        description: Task running log
        description1: !include api/documentation/job/runningTasks.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        schema200: !include api/schemas/job/runningTaskLog-schema.json
        schema: !include api/schemas/job/runningTaskLogFilter-schema.json
        example: TODO
        example200: " "

/tasks/history:
  type:
    postJSONWithOptionalJSId:
      description: Task history
      description1: !include api/documentation/job/filteredByJobs.md
      description2: !include api/documentation/job/excludeJobs.md
      description3: !include api/documentation/common/dateFrom.md
      description4: !include api/documentation/common/dateTo.md
      description5: !include api/documentation/common/completedDateFrom.md
      description6: !include api/documentation/common/completedDateTo.md
      description7: !include api/documentation/common/timeZone.md
      description8: !include api/documentation/job/patterns.md
      description9: !include api/documentation/common/folders.md
      description10: !include api/documentation/common/limit.md
      description11: !include api/documentation/common/historyStates.md
      description12: !include api/documentation/job/criticalities.md
      description13: !include api/documentation/job/taskIds.md
      description200: TODO
      schema: !include api/schemas/job/jobsFilter-schema.json
      schema200: !include api/schemas/job/history-schema.json
      example: TODO
      example200: !include api/examples/job/taskHistory-example.json

/touch:
  type: error
  post:
    description: |
      <h2>Refesh the session timeout</h2>
    responses:
      200:
        description: |
          **Confirm 'Touch' successfully**
        body:
          application/json:
            example: |
              {
                "deliveryDate":"2016-05-05T21:13:35Z",
                "ok":true
              }
            schema: ok

# moved to api-internal.raml
#/tree:
#  type:
#    postJSON:
#      description: Collections of specified object with folders information in a tree structure
#      description1: " "
#      description2: " "
#      description3: " "
#      description4: " "
#      description5: " "
#      description6: !include api/documentation/common/folders.md
#      description7: !include api/documentation/common/typesParam.md
#      description8: !include api/documentation/inventory/onlyValidObjects.md
#      description9: " "
#      description10: " "
#      description200: !include api/documentation/tree/tree.md
#      schema: !include api/schemas/tree/treeFilter-schema.json
#      schema200: !include api/schemas/tree/treeView-schema.json
#      example: !include api/examples/tree/filteredtree-example.json
#      example200: !include api/examples/tree/tree-example.json

/utilities:
  /convert_relative_dates:
    type:
      postJSONWithoutJSId:
        description: To convert a relative date like +1d to a date yyyy-mm-dd
        description1: !include api/documentation/dailyplan/relativeDates.md
        description2:
        description3:
        description4:
        description5:
        description6:
        description7:
        description9:
        description10:
        description200: " "
        schema: !include api/schemas/orderManagement/dailyplan/relativeDatesConverter-schema.json
        schema200: !include api/schemas/orderManagement/dailyplan/relativeDatesConverter-schema.json
        example: " "
        example200: " "

  /cyclic_orders:
    type:
      postJSONWithoutJSId:
        description: To expand a list of orderIds to a list with the expanded cyclic orderIds
        description1: !include api/documentation/dailyplan/cyclicOrders.md
        description2:
        description3:
        description4:
        description5:
        description6:
        description7:
        description9:
        description10:
        description200: " "
        schema: !include api/schemas/order/ordersFilterV-schema.json
        schema200: !include api/schemas/order/orderIds-schema.json
        example: " "
        example200: " "

  /hash:
    post:
      description: <h2>gets sha512 hash</h2><hr/>
      body:
        text/plain:
      responses:
        200:
          description: If the body is empty then ``plain:`` will be returned<br/>otherwise a sha512 hash with prefix ``sha512:``, e.g.<br/>``sha512:B793649879D61613FD3F711B68F7FF3DB19F2FE2D2C136E8523ABC87612219D5AECB4A09035AD88D544E227400A0A56F02BC990CF0D4CB348F8413DE00BCBF08``
          body:
            text/plain:
    type:
      error:


/workflow:
  type:
    postJSON:
      description: Returns a workflow
      description1: !include api/documentation/workflow/workflowId.md
      description2: " "
      description3: " "
      description4: !include api/documentation/common/compact.md
      description5: " "
      description6: " "
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: !include api/documentation/workflow/workflows-response.md
      schema: !include api/schemas/workflow/workflowFilter-schema.json
      schema200: !include api/schemas/workflow/workflow-schema.json
      example: !include api/examples/workflow/workflowFilter-example.json
      example200: !include api/examples/workflow/workflow_v-example.json

  /dependencies:
    type:
      postJSON:
        description: Returns workflow dependencies
        description1: !include api/documentation/workflow/workflowId.md
        description2: " "
        description3: " "
        description4: !include api/documentation/common/compact.md
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: TODO
        schema: !include api/schemas/workflow/workflowFilter-schema.json
        schema200: !include api/schemas/workflow/workflowDeps-schema.json
        example: !include api/examples/workflow/workflowFilter-example.json
        example200: !include api/examples/workflow/workflowDeps-example.json
        
  /order_templates:
    type:
      postJSON:
        description: Returns order parameterisations from schedules as template for adding adhoc orders
        description1: !include api/documentation/workflow/workflowPath.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: TODO
        schema: !include api/schemas/workflow/workflowPathFilter-schema.json
        schema200: !include api/schemas/workflow/orderParameterisations-schema.json
        example: " "
        example200: " "
        
  /skip:
    type:
      postJSONWithOkResponse:
        description: Skips Job instructions
        description1: !include api/documentation/workflow/workflowLabels.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: !include api/documentation/audit/auditLog.md
        schema: !include api/schemas/workflow/modifyWorkflowLabels-schema.json
        example: " "
        
  /stop:
    type:
      postJSONWithOkResponse:
        description: Stops instructions
        description1: !include api/documentation/workflow/workflowId.md
        description2: !include api/documentation/workflow/workflowPositions.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: !include api/documentation/audit/auditLog.md
        schema: !include api/schemas/workflow/modifyWorkflowPositions-schema.json
        example: " "
        
  /state:
    type:
      postJSON:
        description: Returns which agents has and has not confirmed a suspension or resuming
        description1: !include api/documentation/workflow/workflowId.md
        description200: TODO
        schema: !include api/schemas/workflow/workflowFilter-schema.json
        schema200: !include api/schemas/workflow/workflowState-schema.json
        example: !include api/examples/workflow/workflowFilter-example.json
        example200: " "
        
  /transition:
    type:
      postJSONWithOkResponse:
        description: transitions orders from an older workflow version to the latest workflow
        description1: !include api/documentation/workflow/workflowIdRequired.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: !include api/documentation/audit/auditLog.md
        schema: !include api/schemas/workflow/modifyWorkflow-schema.json
        example: " "
        
  /unskip:
    type:
      postJSONWithOkResponse:
        description: Unskips labeled instructions
        description1: !include api/documentation/workflow/workflowLabels.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: !include api/documentation/audit/auditLog.md
        schema: !include api/schemas/workflow/modifyWorkflowLabels-schema.json
        example: " "
        
  /unstop:
    type:
      postJSONWithOkResponse:
        description: Unstops instructions
        description1: !include api/documentation/workflow/workflowId.md
        description2: !include api/documentation/workflow/workflowPositions.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: !include api/documentation/audit/auditLog.md
        schema: !include api/schemas/workflow/modifyWorkflowPositions-schema.json
        example: " "

/workflows:
  type:
    postJSON:
      description: Returns workflows
      description1: !include api/documentation/workflow/filteredByWorkflows.md
      description2: " "
      description3: !include api/documentation/common/folders.md
      description4: !include api/documentation/common/compact.md
      description5: !include api/documentation/workflow/state.md
      description6: !include api/documentation/workflow/instructionState.md
      description7: " "
      description8: !include api/documentation/workflow/regex.md
      description9: " "
      description10: " "
      description200: !include api/documentation/workflow/workflows-response.md
      schema: !include api/schemas/workflow/workflowsFilter-schema.json
      schema200: !include api/schemas/workflow/workflows-schema.json
      example: !include api/examples/workflow/workflowsFilter-example.json
      example200: !include api/examples/workflow/workflows_v-example.json
  /order_count:
    type:
      postJSON:
        description: Returns number of orders of specified workflows
        description1: !include api/documentation/workflow/workflowIds.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: !include api/documentation/order/dateTo.md
        description8: " "
        description9: " "
        description10: " "
        description200: !include api/documentation/workflow/orderCount-response.md
        schema: !include api/schemas/workflow/workflowIdsFilter-schema.json
        schema200: !include api/schemas/workflow/workflowsOrderCount-schema.json
        example: !include api/examples/workflow/orderCount-example.json
        example200: !include api/examples/workflow/orderCount-response-example.json
        
  /search:
    type:
      postJSON:
        description: Searches deployed workflows
        description1: !include api/documentation/inventory/search/search-folders.md
        description2: !include api/documentation/workflow/state.md
        description3: !include api/documentation/workflow/instructionState.md
        description4: " "
        description5: " "
        description6: !include api/documentation/inventory/search/advanched.md
        description7: " "
        description8: !include api/documentation/inventory/search/advanched-lock.md
        description9: !include api/documentation/inventory/search/advanched-noticeboard.md
        description10: !include api/documentation/inventory/search/advanched-calendar.md
        description200: " "
        schema: !include api/schemas/workflow/search/workflowBaseSearchFilter-schema.json
        example: !include api/examples/workflow/workflowSearch-example.json
        schema200: !include api/schemas/inventory/search/response-search-schema.json
        example200: TODO
        
  /resume:
    type:
      modifyWorkflow:
        description: Resume workflows
        audit: !include api/documentation/audit/auditLog.md        
        
  /suspend:
    type:
      modifyWorkflow:
        description: Suspend workflows
        audit: !include api/documentation/audit/auditLog.md


/yade:
  description: This is not an API call. Use its children!!

  /overview/summary:
    type:
      postJSONWithOptionalJSId:
        description: |
            Summary with number of<h5>
            * successful transferred files
            * failed transferred files
            </h5>
        description1: !include api/documentation/common/dateFrom.md
        description2: !include api/documentation/common/dateTo.md
        description3: !include api/documentation/common/timeZone.md
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description11: " "
        description12: " "
        description13: " "
        description200: " "
        schema200: !include api/schemas/yade/summary-schema.json
        schema: !include api/schemas/yade/transferFilter-schema.json
        example: |
            {
              "dateFrom": "1d"
            }
        example200: !include api/examples/yade/summary-example.json
#  /overview/snapshot:
#      type:
#        postOnlyId:
#          description: |
#            Summary with number of<h5>
#            * running file transfers
#            * suspended file transfers
#            * file transfers with setback
#            * waiting for resource file transfers
#            </h5>
#          description200: " "
#          example: " "
#          schema200: !include api/schemas/yade/snapshot-schema.json
#          example200: " "
#
  /transfer:
    type:
      postJSONWithoutJSId:
        description: Gets file transfer
        description1: !include api/documentation/yade/transferId.md
        description2: !include api/documentation/common/compact.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: !include api/documentation/yade/transfers.md
        schema: !include api/schemas/yade/transferId-schema.json
        schema200: !include api/schemas/yade/transfer-schema.json
        example: " "
        example200: " "
  
  /transfers:
    type:
      postJSONWithOptionalJSId:
        description: Gets file transfers
        description1: " "
        description2: !include api/documentation/common/compact.md
        description3: !include api/documentation/common/dateFrom.md
        description4: !include api/documentation/common/dateTo.md
        description5: !include api/documentation/common/timeZone.md
        description6: !include api/documentation/yade/operations.md
        description7: !include api/documentation/yade/states.md
        description8: !include api/documentation/yade/source.md
        description9: !include api/documentation/yade/target.md
        description10: !include api/documentation/yade/profile.md
        description11: !include api/documentation/yade/patterns.md
        description12: !include api/documentation/yade/workflowNames.md
        description13: !include api/documentation/common/limit.md
        description200: !include api/documentation/yade/transfers.md
        schema: !include api/schemas/yade/transferFilter-schema.json
        schema200: !include api/schemas/yade/transfers-schema.json
        example: !include api/examples/audit/audit-request-example.json
        example200: !include api/examples/yade/transfers-example.json

  /files:
    type:
      postJSONWithoutJSId:
        description: Gets transferred files
        description1: " "
        description2: " "
        description3: !include api/documentation/yade/transferIds.md
        description4: " "
        description5: " "
        description6: !include api/documentation/yade/fileStates.md
        description7: !include api/documentation/yade/patterns.md
        description8: " "
        description9: !include api/documentation/yade/integrityHash.md
        description10: !include api/documentation/common/limit.md
        description200: " "
        schema: !include api/schemas/yade/filesFilter-schema.json
        schema200: !include api/schemas/yade/files-schema.json
        example: " "
        example200: " "

  /file:
    type:
      postJSONWithoutJSId:
        description: Gets transferred file
        description1: " "
        description2: !include api/documentation/yade/fileId.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/yade/fileFilter-schema.json
        schema200: !include api/schemas/yade/file200-schema.json
        example: " "
        example200: " "

#  /transfer/order:
#    type:
#      postJSON:
#        description: Lists parametrisized order information for "resume order" dialog
#        description1: !include api/documentation/yade/transferId.md
#        description2: " "
#        description3: " "
#        description4: " "
#        description5: " "
#        description6: " "
#        description7: " "
#        description8: " "
#        description9: " "
#        description10: " "
#        description200: " "
#        schema: !include api/schemas/yade/modifyTransfer-schema.json
#        schema200: !include api/schemas/order/order200_v-schema.json
#        example: " "
#        example200: " "
#
#  /orders:
#    type:
#      postJSON:
#        description: Gets orders filtered by a period, job chains or order state
#        description1: !include api/documentation/common/compact.md
#        description2: " "
#        description3: " "
#        description4: " "
#        description5: " "
#        description6: !include api/documentation/order/filteredByOrders.md
#        description7: !include api/documentation/yade/orderstate.md
#        description8: " "
#        description9: " "
#        description10: " "
#        description200: !include api/documentation/order/orders_v.md
#        schema: !include api/schemas/order/ordersFilter-schema.json
#        schema200: !include api/schemas/order/orders_v-schema.json
#        example: !include api/examples/order/filteredOrders-example.json
#        example200: " "