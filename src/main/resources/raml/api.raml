#%RAML 0.8
title: JOC API
version: 2.0.0
protocols: [ HTTP, HTTPS ]
#baseUri: http://test.sos-berlin.com:3001/joc/api
#mediaType: application/json

documentation:
  - title: VERSIONS
    content: !include api/documentation/common/versions.md


schemas:
  - errors: !include api/schemas/common/errors-schema.json
  - error420: !include api/schemas/common/error420-schema.json
  - ok: !include api/schemas/common/ok-schema.json
  - orders: !include api/schemas/order/orders_v-schema.json
  - jsFilter: !include api/schemas/controller/controllerId-optional-schema.json
  - jsFilterReq: !include api/schemas/controller/controllerId-required-schema.json
  - jsFilterWithUrl: !include api/schemas/controller/urlParam-schema.json
  - jsRegister: !include api/schemas/controller/registerParam-schema.json
  - taskFilter: !include api/schemas/job/taskFilter-schema.json
  - orderHistoryFilter: !include api/schemas/order/orderHistoryFilter-schema.json
  - addOrders: !include api/schemas/order/addOrders-schema.json
  - orderIds: !include api/schemas/order/orderIds-schema.json
  - modifyOrders: !include api/schemas/order/modifyOrders-schema.json
  - modifyCalendars: !include api/schemas/calendar/calendarsFilter-schema.json
  - security: !include api/schemas/user/security-schema.json
  - loginConfiguration: !include api/schemas/configuration/login-schema.json


resourceTypes:
  - error: !include api/resourceTypes/common/error.raml
  - postWithPlainResponse: !include api/resourceTypes/joc/postWithPlainResponse.raml
  - postCalendarWithOkResponse: !include api/resourceTypes/calendar/postJSONWithOkResponse.raml
  - postDocuWithOkResponse: !include api/resourceTypes/docu/postJSONWithOkResponse.raml
  - postWithOkResponse: !include api/resourceTypes/controller/postWithOkResponse.raml
  - registerControllerWithOkResponse: !include api/resourceTypes/controller/registerControllerWithOkResponse.raml
  - postURLWithPlainResponse: !include api/resourceTypes/controller/postWithPlainResponse.raml
  - postStateResponse: !include api/resourceTypes/controller/postStateResponse.raml
  - postJSON: !include api/resourceTypes/common/postJSON.raml
  - postJSONWithOptionalJSId: !include api/resourceTypes/common/postJSONWithOptionalJSId.raml
  - postJSONWithoutJSId: !include api/resourceTypes/common/postJSONWithoutJSId.raml
  - postWithoutJSONandJSId: !include api/resourceTypes/common/postWithoutJSONandJSId.raml
  - postJSONWithOkWithoutJSId: !include api/resourceTypes/common/postJSONWithOkWithoutJSId.raml
  - postJSON18: !include api/resourceTypes/common/postJSON18.raml
  - postYADEJSONWithOkResponse: !include api/resourceTypes/yade/postJSONWithOkResponse.raml
  - postOnlyAccessToken: !include api/resourceTypes/common/postOnlyAccessToken.raml
  - postOnlyId: !include api/resourceTypes/common/postOnlyId.raml
  - postOnlyOptionalId: !include api/resourceTypes/common/postOnlyOptionalId.raml
  - postJSONWithOkResponse: !include api/resourceTypes/common/postJSONWithOkResponse.raml
  - postForDownload: !include api/resourceTypes/common/postForDownload.raml
  - postForUpload: !include api/resourceTypes/common/postForUpload.raml
  - postLog: !include api/resourceTypes/common/postLog.raml
  - postDocu: !include api/resourceTypes/docu/postDocu.raml
  - getDocu: !include api/resourceTypes/docu/getDocu.raml
  - login: !include api/resourceTypes/user/login.raml
  - logout: !include api/resourceTypes/user/logout.raml
  - postEvent: !include api/resourceTypes/common/postEvent.raml
  - postTaskLogWithPlainResponse: !include api/resourceTypes/job/postWithPlainResponse.raml
  - modifyOrder: !include api/resourceTypes/order/modify.raml
  - addOrder: !include api/resourceTypes/order/add.raml
  - postOrderLogWithPlainResponse: !include api/resourceTypes/order/postWithPlainResponse.raml
  - modifyCalendar: !include api/resourceTypes/calendar/modify.raml
  - loginConfiguration: !include api/resourceTypes/configuration/login.raml
  - postForDownloadUnsigned: !include api/resourceTypes/publish/postForDownloadUnsigned.raml
  - postForUploadSigned: !include api/resourceTypes/publish/postForUploadSigned.raml
  - postForUploadUnsigned: !include api/resourceTypes/publish/postForUploadUnsigned.raml
  - postForGenerateKey: !include api/resourceTypes/publish/postForGenerateKey.raml
  - postForExport: !include api/resourceTypes/publish/postForExport.raml
  - postForImportDeploy: !include api/resourceTypes/publish/postForImportDeploy.raml
  - postForShowDepHistory: !include api/resourceTypes/publish/postForShowDepHistory.raml
  

traits:
  - jobschedulerController: !include api/traits/jobschedulerController.raml
  - filteredByPath: !include api/traits/filteredByPath.raml
  - filteredByOrderId: !include api/traits/filteredByOrderId.raml
  - filteredByJSType: !include api/traits/filteredByJSType.raml
  - filteredByTransferFileId: !include api/traits/filteredByTransferFileId.raml
  - accessToken: !include api/traits/accessToken.raml
  - filename: !include api/traits/filename.raml

/agents:
  type:
    postJSON:
      description: Get Agents
      description1: !include api/documentation/agent/agentIds.md
      description2: !include api/documentation/agent/states.md
      description3: !include api/documentation/agent/onlyEnabledAgents.md
      description4: !include api/documentation/common/compact.md
      description5: " "
      description6: " "
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: !include api/documentation/agent/agents_v.md
      schema: !include api/schemas/agent/readAgents_v-schema.json
      schema200: !include api/schemas/agent/agents_v-schema.json
      example: !include api/examples/agent/agents_v-request-example.json
      example200: !include api/examples/agent/agents_v-example.json
  
  /p:
    type:
      postJSONWithOptionalJSId:
        description: Get persitent Agent information
        description1: !include api/documentation/agent/agentIds.md
        description2: " "
        description3: !include api/documentation/agent/onlyEnabledAgents.md
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description11: " "
        description12: " "
        description13: " "
        description200: !include api/documentation/agent/agents_p.md
        schema: !include api/schemas/agent/readAgents-schema.json
        schema200: !include api/schemas/agent/agents-schema.json
        example: !include api/examples/controller/controllerParam-example.json
        example200: !include api/examples/agent/agents_p-example.json
        
  /reassign:
    type:
      postWithOkResponse:
        description: Repeats assignment of Agents to Controllers
        urlparam: " "
        failover: " "
        audit: !include api/documentation/audit/auditLog.md
        
  /report:
    type:
      postJSONWithOptionalJSId:
        description: Get report of Agent tasks
        description1: !include api/documentation/common/dateFrom.md
        description2: !include api/documentation/common/dateTo.md
        description3: !include api/documentation/common/timeZone.md
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description11: " "
        description12: " "
        description13: " "
        description200: " "
        schema: !include api/schemas/agent/agentReportFilter-schema.json
        schema200: !include api/schemas/agent/agentReports-schema.json
        example: " "
        example200: " "
        
  /store:
    type:
      postJSONWithOkResponse:
        description: Stores Agents persistently and assignes Agents to Controllers
        description1: !include api/documentation/agent/agents.md
        description2: !include api/documentation/audit/auditLog.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/agent/storeParam-schema.json
        example: !include api/examples/agent/store-example.json
        
#  /tasks:
#    type:
#      postJSON:
#        description: Get collection of Agents from database
#        description1: !include api/documentation/agent/agentIds.md
#        description2: !include api/documentation/agent/onlyEnabledAgents.md
#        description3: " "
#        description4: " "
#        description5: " "
#        description6: " "
#        description7: " "
#        description8: " "
#        description9: " "
#        description10: " "
#        description200: " "
#        schema: !include api/schemas/agent/readAgents_v-schema.json
#        schema200: !include api/schemas/agent/agentTasks-schema.json
#        example: !include api/examples/agent/agents_v-request-example.json
#        example200: " "
        

/audit_log:
  type:
    postJSONWithOptionalJSId:
      description: Get the audit log
      description1: !include api/documentation/common/dateFrom.md
      description2: !include api/documentation/common/dateTo.md
      description3: !include api/documentation/common/timeZone.md
      description4: " "
      description5: !include api/documentation/common/folders.md
      description6: !include api/documentation/audit/objectTypes.md
      description7: " "
      description8: !include api/documentation/audit/ticketLink.md
      description9: !include api/documentation/audit/comment.md
      description10: !include api/documentation/configuration/userParam.md
      description11: !include api/documentation/common/limit.md
      description12: " "
      description13: " "
      description200: !include api/documentation/audit/audit.md
      schema: !include api/schemas/audit/auditLogFilter-schema.json
      schema200: !include api/schemas/audit/auditLog-schema.json
      example: !include api/examples/audit/audit-request-example.json
      example200: !include api/examples/audit/audit-response-example.json
  /comments:
    type:
      postOnlyAccessToken:
        description: Get pre-defined comments and force_comments_for_audit_log settings
        description200: " "
        schema200: !include api/schemas/audit/comments-schema.json
        example200: !include api/examples/audit/comments-example.json
  /details:
    type:
      postJSONWithoutJSId:
        description: Get processed objects of an audit log entry
        description1: !include api/documentation/audit/detail.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema200: !include api/schemas/audit/auditLogDetails-schema.json
        example200: !include api/examples/audit/auditDetail-response-example.json
        schema: !include api/schemas/audit/auditLogDetailFilter-schema.json
        example: !include api/examples/audit/auditDetail-request-example.json

/authentication:
  description: This is not an API call. Use child urls instead!
  
  /joc_cockpit_permissions:
    type:
      postOnlyAccessToken:
        description: Get permissions for current account
        description200: " "
        example200: !include api/examples/user/permissions-example.json
        schema200: !include api/schemas/security/permissions-schema.json
  
  /login:
    type: login
    
  /logout:
    type: logout 
      
  /shiro:
    type: error
    post:
      description: <h2>Reads configuration from shiro.ini</h2>
      responses:
        200:
          body:
            application/json:
              schema: !include api/schemas/security/security-configuration-schema.json
      
  /shiro/store:
    type:
      postJSONWithoutJSId:
        description: Writes configuration in shiro.ini
        description1: !include api/documentation/security/main.md
        description2: !include api/documentation/security/users.md
        description3: !include api/documentation/security/roles.md
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema200: !include api/schemas/security/security-configuration-schema.json
        example200: " "
        schema: !include api/schemas/security/security-configuration-schema.json
        example: " "    
    
    

/calendar/dates:
  type:
    postJSONWithoutJSId:
      description: Get dates of a calendar
      description1: !include api/documentation/calendar/calendarIdPath.md
      description2: " "
      description3: !include api/documentation/calendar/dateFrom.md
      description4: !include api/documentation/calendar/dateTo.md
      description5: " "
      description6: " "
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: " "
      schema: !include api/schemas/calendar/calendarDatesFilter-schema.json
      example: !include api/examples/calendar/calendarDates-example.json
      schema200: !include api/schemas/calendar/dates-schema.json
      example200: TODO
#/calendar:
#  description: This is not an API call. Use its children!!
#          
#  /documentation:
#    get:
#    type:
#      postDocu:
#        description: Show documentation
#        jsObjectParam: calendar
#        jsObject: Calendar
                    
/calendars:
  type:
    postJSONWithoutJSId:
      description: Get calendars
      description1: !include api/documentation/calendar/filteredByCalendarPaths.md
      description2: !include api/documentation/calendar/filteredByCalendarIds.md
      description3: !include api/documentation/common/compact.md
      description4: !include api/documentation/common/regex.md
      description5: !include api/documentation/common/folders.md
      description6: !include api/documentation/calendar/calendarType.md
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: !include api/documentation/calendar/calendar.md
      schema: !include api/schemas/calendar/calendarsFilter-schema.json
      schema200: !include api/schemas/calendar/calendars-schema.json
      example: " "
      example200: " "
      
#  /used:
#    type:
#      postJSON:
#        description: Sends compact collection of calendar items with objects which use it
#        description1: " "
#        description2: !include api/documentation/common/regex.md
#        description3: !include api/documentation/common/folders.md
#        description4: !include api/documentation/calendar/calendarType.md
#        description5: " "
#        description6: !include api/documentation/calendar/filteredByCalendarPaths.md
#        description7: !include api/documentation/calendar/filteredByCalendarIds.md
#        description8: " "
#        description9: " "
#        description10: " "
#        description200: !include api/documentation/calendar/calendar.md
#        schema: !include api/schemas/calendar/calendarsFilter-schema.json
#        schema200: !include api/schemas/calendar/calendars-schema.json
#        example: " "
#        example200: " "


/controller:
  type:
    postStateResponse:
      description: Get Controller status information
      urlparam: !include api/documentation/controller/urlParamClusterRequired.md
      description200: !include api/documentation/controller/master.md
      schema200: !include api/schemas/controller/jobscheduler200_v-schema.json
      example200: " "
  /abort:
    type:
      postWithOkResponse:
        description: Aborts Controller and optionally fails over
        urlparam: !include api/documentation/controller/urlParamClusterRequired.md
        failover: " "
        audit: !include api/documentation/audit/auditLog.md
  /abort_and_restart:
    type:
      postWithOkResponse:
        description: |
          Aborts and restarts Controller and optionally fails over
          <h5>...</h5>
        urlparam: !include api/documentation/controller/urlParamClusterRequired.md
        failover: " "
        audit: !include api/documentation/audit/auditLog.md
  
  /cleanup:
    type:
      postWithOkResponse:
        description: Unregister Controller
        urlparam: " "
        failover: " "
        audit: !include api/documentation/audit/auditLog.md
  
  /cluster/appoint_nodes:
    type:
      postWithOkResponse:
        description: |
          Re-establish Controller Cluster roles and assign cluster-watching Agent<h5>
          * Primary and secondary Controllers are assigned the active and standby roles. 
          * In addition an Agent is assign the cluster-watching role. This information is persitent when registering a Controller.
          * The resource can be used to re-established the roles in a cluster, e.g. in case that Controller journals are renewed.
          </h5>
        urlparam: " "
        failover: " "
        audit: !include api/documentation/audit/auditLog.md

  /cluster/switchover:
    type:
      postWithOkResponse:
        description: Switch-over Controller Cluster
        urlparam: " "
        failover: " "
        audit: !include api/documentation/audit/auditLog.md

  /ids:
    type: error
    post:
      description: |
        <h2>Get registered Controller IDs</h2>
      responses:
        200:
          description: |
            * The collection of all available Controller Ids can be used for a
            selectbox in which the user can change the Id.
            * The Id which is specified in the selected field will be used for
            all following requests
          body:
            application/json:
              schema: !include api/schemas/controller/controllerIds-schema.json
              example: !include api/examples/controller/ids-example.json
  /log:
    type:
      postURLWithPlainResponse:
        description: Provides Controller log (controller.log) for download in gzip format
        description200: Snapshot of current controller.log for download in gzip format
  
  /p:
    type:
      postStateResponse:
        description: Get Controller persistent information
        urlparam: !include api/documentation/controller/urlParamClusterRequired.md
        description200: !include api/documentation/controller/jobscheduler_p.md
        schema200: !include api/schemas/controller/jobscheduler200_v-schema.json
        example200: " "
  
  /register:
    type: 
      registerControllerWithOkResponse:
        description: |
          Registers a Controller<h5>
          * A Controllers consists of a standalone instance or cluster with primary and standby nodes.
          * This resource adds a Controller to JOC Cockpit. Updates Controller instance information such as the URL.
          </h5>
        audit: !include api/documentation/audit/auditLog.md

  /restart:
    type:
      postWithOkResponse:
        description: Restarts Controller instance
        urlparam: !include api/documentation/controller/urlParamClusterRequired.md
        failover: !include api/documentation/controller/failover.md
        audit: !include api/documentation/audit/auditLog.md
  
  /terminate:
    type:
      postWithOkResponse:
        description: Terminates Controller instance
        urlparam: !include api/documentation/controller/urlParamClusterRequired.md
        failover: !include api/documentation/controller/failover.md
        audit: !include api/documentation/audit/auditLog.md
  
  /test:
    type:
      postJSONWithoutJSId:
        description: Tests Controller instance connection and Controller ID
        description1: |
          <tr><td>``controllerId``</td><td>required, string</td><td>Controller ID is used to check if the Controller is registered for the given Controller ID, can be empty for a connection test</td><td>scheduler</td><td></td></tr>
        description2: !include api/documentation/controller/urlParamRequired.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: !include api/documentation/controller/jobschedulerTest.md
        schema200: !include api/schemas/controller/jobscheduler200_v-schema.json
        example200: !include api/examples/controller/test-example.json
        schema: !include api/schemas/controller/testParam-schema.json
        example: |
          {
            "controllerId": "scheduler",
            "url": "http://jobSchedulerHost:40444"
          }

/controllers:
  type:
    postOnlyOptionalId:
      description: Get Controllers
      description200: !include api/documentation/controller/master.md
      schema200: !include api/schemas/controller/masters-schema.json
      example200: " "
  /p:
    type:
      postOnlyOptionalId:
        description: Get persistent Controllers
        description200: !include api/documentation/controller/controller_p.md
        schema200: !include api/schemas/controller/masters-schema.json
        example200: !include api/examples/controller/controller_p-example.json
  /security_level:
    type:
      postOnlyAccessToken:
        description: Get Controller IDs with security level
        description200: !include api/documentation/controller/securityLevels.md
        schema200: !include api/schemas/controller/masters-schema.json
        example200: !include api/examples/controller/securityLevels-example.json
    /take_over:
      type:
        postWithOkResponse:
          description: Current security level will be take over to existing Controllers
          
/daily_plan:
  description: This is not an API call. Use its children!!
  /order/variables:
    type:
      postJSON:
        description: Read the variables for a given order 
        description1: !include api/documentation/order/orderIdRequired.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/order/orderFilter-schema.json
        schema200: !include api/schemas/orderManagement/orders/orderVariables-schema.json
        example: " "
        example200: " "
  /orders:
    type: 
      postJSON:
        description: Get daily plan Orders
        description1: !include api/documentation/dailyplan/orders/dailyPlanOrdersFilterDef.md
        description2: !include api/documentation/dailyplan/dailyPlanDate.md
        description3: !include api/documentation/dailyplan/orders/schedules.md
        description4: !include api/documentation/dailyplan/orders/folders.md
        description5: !include api/documentation/dailyplan/orders/workflowPaths.md
        description6: !include api/documentation/dailyplan/orders/late.md
        description7: !include api/documentation/dailyplan/orders/states.md
        description8: !include api/documentation/dailyplan/orders/submissionHistoryIds.md
        description9: !include api/documentation/dailyplan/orders/controllerIds.md
        description10: !include api/documentation/dailyplan/orders/orderIds.md
        description200: " "
        schema: !include api/schemas/orderManagement/dailyplan/dailyPlanOrdersFilter-schema.json
        schema200: !include api/schemas/orderManagement/dailyplan/plannedOrders-schema.json
        example: " "
        example200: " "
        
    /generate:
      type:
        postJSON:
          description: Generates Orders of a given daily plan 
          description1: !include api/documentation/dailyplan/generate/dailyPlanOrdersSelectorDef.md
          description2: !include api/documentation/dailyplan/dailyPlanDate.md
          description3: !include api/documentation/dailyplan/generate/schedules.md
          description4: !include api/documentation/dailyplan/generate/folders.md
          description5: !include api/documentation/dailyplan/generate/workflowPaths.md
          description6: !include api/documentation/dailyplan/generate/controllerIds.md
          description7: !include api/documentation/dailyplan/generate/overwrite.md
          description8: !include api/documentation/dailyplan/generate/withSubmit.md
          description10: !include api/documentation/audit/auditLog.md
          audit: !include api/documentation/audit/auditLog.md
          description200: " "
          schema: !include api/schemas/orderManagement/dailyplan/dailyPlanOrdersSelector-schema.json
          schema200: ok
          example: " "
          example200: " "
           
    /submit:
      type:
        postJSON:
          description: Submits planned Orders of a given daily plan
          description1: !include api/documentation/dailyplan/submit/dailyPlanOrdersFilterDef.md
          description2: !include api/documentation/dailyplan/dailyPlanDate.md
          description3: !include api/documentation/dailyplan/orders/schedules.md
          description4: !include api/documentation/dailyplan/orders/folders.md
          description5: !include api/documentation/dailyplan/orders/workflowPaths.md
          description6: !include api/documentation/dailyplan/orders/submissionHistoryIds.md
          description7: !include api/documentation/dailyplan/submit/controllerIds.md
          description8: !include api/documentation/dailyplan/orders/orderIds.md
          description9: !include api/documentation/audit/auditLog.md
          description10: " "
          audit: !include api/documentation/audit/auditLog.md
          description200: " "
          schema: !include api/schemas/orderManagement/dailyplan/dailyPlanOrdersFilter-schema.json
          schema200: ok
          example: " "
          example200: " "
    /delete:
      type:
        postJSON:
          description: Deletes planned Orders of a given daily plan 
          description1: !include api/documentation/dailyplan/delete/dailyPlanOrdersFilterDef.md
          description2: !include api/documentation/dailyplan/dailyPlanDate.md
          description3: !include api/documentation/dailyplan/orders/schedules.md
          description4: !include api/documentation/dailyplan/orders/folders.md
          description5: !include api/documentation/dailyplan/orders/workflowPaths.md
          description6: !include api/documentation/dailyplan/orders/late.md
          description7: !include api/documentation/dailyplan/orders/submissionHistoryIds.md
          description8: !include api/documentation/dailyplan/orders/controllerIds.md
          description9: !include api/documentation/dailyplan/orders/orderIds.md
          description10: !include api/documentation/audit/auditLog.md
          audit: !include api/documentation/audit/auditLog.md
          description200: " "
          schema: !include api/schemas/orderManagement/dailyplan/dailyPlanOrdersFilter-schema.json
          schema200: ok
          example: " "
          example200: " "
    /modify:
      type:
        postJSON:
          description: Modifies Orders for the daily plan 
          description1: !include api/documentation/dailyplan/modify/startTime.md
          description2: !include api/documentation/dailyplan/modify/variables.md
          description3: !include api/documentation/dailyplan/modify/removeVariables.md
          description4: !include api/documentation/dailyplan/orders/orderIds.md
          description5: 
          description6: 
          description7: 
          description9: 
          description10: 
          audit: !include api/documentation/audit/auditLog.md
          description200: " "
          schema: !include api/schemas/orderManagement/dailyplan/dailyPlanModifyOrder-schema.json
          schema200: ok
          example: " "
          example200: " "
    /summary:
      type:
        postJSON:
          description: Get Summary order counts for the daily plan 
          description1: !include api/documentation/dailyplan/summary/dailyPlanOrdersFilterDef.md
          description2: !include api/documentation/dailyplan/dailyPlanDate.md
          description3: !include api/documentation/dailyplan/orders/schedules.md
          description4: !include api/documentation/dailyplan/orders/folders.md
          description5: !include api/documentation/dailyplan/orders/workflowPaths.md
          description6: !include api/documentation/dailyplan/orders/late.md
          description7: !include api/documentation/dailyplan/orders/submissionHistoryIds.md
          description8: !include api/documentation/dailyplan/orders/controllerIds.md
          description9: !include api/documentation/dailyplan/orders/orderIds.md
          description10: 
          description200: " "
          schema: !include api/schemas/orderManagement/dailyplan/dailyPlanOrdersFilter-schema.json
          schema200: !include api/schemas/orderManagement/dailyplan/dailyPlanOrderSummary-schema.json
          example: " "
          example200: " "
        
  /history:
    type:
      postJSON:
        description: Get daily plan history
        description1: !include api/documentation/dailyplan/history/dailyPlanHistoryFilterDef.md
        description2: !include api/documentation/dailyplan/history/dateFrom.md
        description3: !include api/documentation/dailyplan/history/dateTo.md
        description4: !include api/documentation/dailyplan/history/submitted.md
        description5: !include api/documentation/dailyplan/history/timeZone.md
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/orderManagement/dailyplan/dailyplanHistoryFilter-schema.json
        schema200: !include api/schemas/orderManagement/dailyplan/dailyPlanHistory-schema.json 
        example: " "
        example200: " "
                    
  /submissions:
    type:
      postJSON:
        description: Get daily plan submissions 
        description1: !include api/documentation/dailyplan/submissions/dailyPlanSubmissionsFilterDef.md
        description2: !include api/documentation/dailyplan/submissions/dateFrom.md
        description3: !include api/documentation/dailyplan/submissions/dateTo.md
        description5: !include api/documentation/dailyplan/submissions/controllerIds.md
        description4: !include api/documentation/dailyplan/submissions/timeZone.md
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/orderManagement/dailyplan/dailyplanSubmissionsFilter-schema.json
        schema200: !include api/schemas/orderManagement/dailyplan/dailyPlanSubmissions-schema.json 
        example: " "
        example200: " "
                
    /delete:
      type:
        postJSON:
          description: Deletes daily plan submissions 
          description1: !include api/documentation/dailyplan/submissions/dailyPlanSubmissionsFilterDef.md
          description2: !include api/documentation/dailyplan/submissions/dateFrom.md
          description3: !include api/documentation/dailyplan/submissions/dateTo.md
          description5: !include api/documentation/dailyplan/submissions/controllerIds.md
          description4: !include api/documentation/dailyplan/submissions/timeZone.md
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          description200: " "
          schema: !include api/schemas/orderManagement/dailyplan/dailyplanSubmissionsFilter-schema.json
          schema200: ok
          example: " "
          example200: " "
               
/documentation:
  description: |
    This is not an API call. Use its children!!
  
  /{accessToken}/{path}:
   type:
      getDocu:
        description: " "
  /used:
    type:
      postJSONWithoutJSId:
        description: Get Controller objects which use the documentation
        description1: !include api/documentation/docu/docPath.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/docu/documentationFilter-schema.json
        schema200: !include api/schemas/docu/usedBy-schema.json
        example: " "
        example200: " "
  /preview:
    get:
    type:
      postDocu:
        description: Preview the documentation
        jsObjectParam: documentation
        jsObject: documentation
        description1: !include api/documentation/docu/jsObject.md
        description2: " "
        schema: !include api/schemas/docu/documentationShow-schema.json
        example: " "
  /show:
    get:
    is: [ filteredByJSType ]
    type:
      postDocu:
        description: Get the documentation of a Controller object
        jsObjectParam: path
        jsObject: Controller object
        description1: !include api/documentation/docu/jsObject.md
        description2: " "
        schema: !include api/schemas/docu/documentationShow-schema.json
        example: " "
  /url:
    post:
    type:
      postJSONWithoutJSId:
        description: Get the URL of a documentation of a Controller object
        description1: !include api/documentation/docu/jsObject.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/docu/documentationShow-schema.json
        schema200: !include api/schemas/docu/url-schema.json
        example: " "
        example200: " "    


#/documentations:
#  type:
#    postJSONWithoutJSId:
#      description: Get collection of documentations
#      description1: !include api/documentation/docu/filteredByPaths.md
#      description2: " "
#      description3: !include api/documentation/common/regex.md
#      description4: !include api/documentation/common/folders.md
#      description5: !include api/documentation/docu/docuTypes.md
#      description6: " "
#      description7: " "
#      description8: " "
#      description9: " "
#      description10: " "
#      description200: !include api/documentation/docu/docu.md
#      schema: !include api/schemas/docu/documentationsFilter-schema.json
#      schema200: !include api/schemas/docu/documentations-schema.json
#      example: " "
#      example200: " "
#  /export:
#    get:
#    type:
#      postForDownload:
#        description: Provides export file (zip) as download of documentations
#        description1: !include api/documentation/docu/filteredByPaths.md
#        description2: !include api/documentation/common/folders.md
#        description3: " "
#        description4: " "
#        description5: " "
#        infoapi: ./documentation/export
#        schema: !include api/schemas/docu/documentationsFilter-schema.json
#        example: " "
#    /info:
#      type:
#        postJSON:
#          description: Temp. Filename for Export 
#          description1: !include api/documentation/docu/filteredByPaths.md
#          description2: !include api/documentation/common/folders.md
#          description3: " "
#          description4: " "
#          description5: " "
#          description6: " "
#          description7: " "
#          description8: " "
#          description9: " "
#          description10: " "
#          description200: !include api/documentation/docu/exportInfo.md
#          schema: !include api/schemas/docu/documentationsFilter-schema.json
#          schema200: !include api/schemas/docu/exportInfo-schema.json
#          example: " "
#          example200: " "
#  /import:
#    type:
#      postForUpload:
#        description: Import Documentations
#  /delete:
#    type:
#      postJSON:
#        description: Deletes a list of Documentations
#        description1: !include api/documentation/docu/filteredByPaths.md
#        description2: " "
#        description3: " "
#        description4: " "
#        description5: " "
#        description6: " "
#        description7: " "
#        description8: " "
#        description9: " "
#        description10: " "
#        description200: " "
#        schema: !include api/schemas/docu/documentationsFilter-schema.json
#        schema200: ok
#        example: " "
#        example200: " "


/inventory:
  description: This is not an API call. Use its children!!
  
  /{objectType}/validate:
    type: error
    post:
      description: !include api/documentation/inventory/validate.md
      body:
        application/json:
      responses:
        200:
          body:
            application/json:
              schema: !include api/schemas/inventory/validate-schema.json
        420:
          body:
            application/json:
        440:
          body:
            application/json:
            
  /calendar/dates:
    type:
      postJSONWithoutJSId:
        description: Get dates of a calendar
        description1: !include api/documentation/calendar/calendarIdPath.md
        description2: " "
        description3: !include api/documentation/calendar/dateFrom.md
        description4: !include api/documentation/calendar/dateTo.md
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/calendar/calendarDatesFilter-schema.json
        example: !include api/examples/calendar/calendarDates-example.json
        schema200: !include api/schemas/calendar/dates-schema.json
        example200: TODO
        
  /copy:
    type:
      postJSONWithoutJSId:
        description: Copies inventory object
        description1: !include api/documentation/inventory/idOrPathAndType.md
        description2: !include api/documentation/inventory/newPath.md
        description3: !include api/documentation/inventory/shallowCopy.md
        description4: !include api/documentation/inventory/suffixPrefix4copy.md
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: !include api/documentation/audit/auditLog.md
        description200: !include api/documentation/inventory/newObject.md
        schema: !include api/schemas/inventory/copy/request-filter-schema.json
        example: !include api/examples/inventory/rename-example.json
        schema200: !include api/schemas/inventory/common/response-newPath-schema.json
        example200: " "
  
  /delete_draft:
    type:
      postJSONWithoutJSId:
        description: Revert configuration draft of an inventory object
        description1: !include api/documentation/inventory/idsOrPathsAndTypes.md
        description2: " "
        description3: " "
        description4: " "
        description5: !include api/documentation/audit/auditLog.md
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/inventory/common/request-filters-schema.json
        example: !include api/examples/inventory/pathsTypes-example.json
        schema200: !include api/schemas/inventory/delete/response-item-schema.json
        example200: !include api/examples/inventory/deleteDraft-response-example.json
        
  /delete_draft/folder:
    type:
      postJSONWithoutJSId:
        description: Revert configuration draft of an inventory object of a folder
        description1: !include api/documentation/inventory/path.md
        description2: " "
        description3: " "
        description4: " "
        description5: !include api/documentation/audit/auditLog.md
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/inventory/common/request-folder-schema.json
        example: TODO
        schema200: !include api/schemas/inventory/delete/response-item-schema.json
        example200: !include api/examples/inventory/deleteDraft-response-example.json
  
  /deployable:
    type:
      postJSONWithoutJSId:
        description: Get deployable object
        description1: !include api/documentation/inventory/idOrPathAndDeployableType.md
        description2: !include api/documentation/inventory/onlyValidObjects.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: !include api/documentation/inventory/withDeployed.md
        description8: " "
        description9: " "
        description10: " "
        description200: !include api/documentation/inventory/deployable.md
        schema: !include api/schemas/inventory/deploy/request-deployable-schema.json
        example: TODO
        schema200: !include api/schemas/inventory/deploy/response-deployable-schema.json
        example200: TODO
        
  /deployables:
    type:
      postJSONWithoutJSId:
        description: Get deployable objects
        description1: !include api/documentation/inventory/folder.md
        description2: !include api/documentation/common/recursive.md
        description3: !include api/documentation/inventory/deployableTypes.md
        description4: !include api/documentation/inventory/onlyValidObjects.md
        description5: " "
        description6: !include api/documentation/inventory/withRemovedObjects.md
        description7: !include api/documentation/inventory/withDeployed.md
        description8: " "
        description9: " "
        description10: " "
        description200: !include api/documentation/inventory/deployables.md
        schema: !include api/schemas/inventory/deploy/request-deployables-schema.json
        example: !include api/examples/inventory/deployables-request-example.json
        schema200: !include api/schemas/inventory/deploy/response-deployables-schema.json
        example200: !include api/examples/inventory/deployables-response-example.json
  
  /deployment:
    description: This is not an API call. Use child urls instead!

    /deploy:
      type:
        postJSONWithOkWithoutJSId:
          description: Signs and deploys deployable objects to- or deletes already deployed objects from the given Controllers 
          description1: !include api/documentation/publish/deployFilter.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/publish/deploy-schema.json
          example: !include api/examples/publish/deploy-example.json

    /history:
      type:
        postForShowDepHistory:
          description: shows the deployment history according to the provided filters 
          description1: !include api/documentation/publish/showDepHistory.md
          schema: !include api/schemas/publish/showDepHistoryFilter-schema.json
          schema200: !include api/schemas/publish/depHistory-schema.json
          example: !include api/examples/publish/showDepHistory-example.json
          example200: !include api/examples/publish/showDepHistoryResponse-example.json

    /import_deploy:
      type:
        postForImportDeploy:
          description: uploads archive file (*.zip, *.tar.gz) with valid deployable configurations and their signatures and deploys the configurations to the specified controller.
          schema: !include api/schemas/publish/importDeployFilter-schema.json
          example: !include api/examples/publish/publishImportDeploy-example.json

    /redeploy:
      type:
        postJSONWithOkWithoutJSId:
          description: redeploys as set of deployable objects from the deplyoment history to the given Controller
          description1: !include api/documentation/publish/redeployFilter.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/publish/redeployFilter-schema.json
          example: !include api/examples/publish/redeployFilter-example.json

    /set_version:
      type:
        postJSONWithOkWithoutJSId:
          description: sets a new version to an array of JS Objects
          description1: !include api/documentation/publish/setVersionFilter.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/publish/setVersion-schema.json
          example: !include api/examples/publish/setVersion-example.json
  
    /set_versions:
      type:
        postJSONWithOkWithoutJSId:
          description: sets a new version per item to an array of JS Objects
          description1: !include api/documentation/publish/setVersionsFilter.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/publish/setVersions-schema.json
          example: !include api/examples/publish/setVersions-example.json

  /export:
    get:
    type:
      postForExport:
        description: provides archive file (zip, tar.gz) to download unsigned JSON files
        description1: !include api/documentation/publish/exportFilterPost.md
        schema: !include api/schemas/publish/exportFilter-schema.json
        example: !include api/examples/publish/publishExport-example.json

  /import:
    type:
      postForUploadUnsigned:
        description: uploads archive file (zip, tar.gz) with unsigned JSON files of deployable and releasable objects  
        schema: !include api/schemas/publish/importFilter-schema.json
        example: !include api/examples/publish/publishImport-example.json

  /path:
    type:
      postJSONWithoutJSId:
        description: Delivers the path of an object, specified by its name and object type
        description1: !include api/documentation/inventory/pathFilter.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/inventory/path/pathFilter-schema.json
        example: !include api/examples/inventory/pathFilter-example.json
        schema200: !include api/schemas/inventory/path/pathResponse-schema.json
        example200: !include api/examples/inventory/pathResponse-example.json
  
  /read/configuration:
    type:
      postJSONWithoutJSId:
        description: Reads configuration of an inventory object
        description1: !include api/documentation/inventory/idOrPathAndTypeOrNameAndType.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: !include api/documentation/inventory/configuration-response.md
        schema: !include api/schemas/inventory/common/request-filter-schema.json
        example: TODO
        schema200: !include api/schemas/inventory/configurationObject-schema.json
        example200: TODO
  
  /read/folder:
    type:
      postJSONWithoutJSId:
        description: Reads folder content
        description1: !include api/documentation/inventory/path.md
        description2: !include api/documentation/inventory/objectTypesWithoutFolder.md
        description3: !include api/documentation/common/recursive.md
        description4: !include api/documentation/inventory/onlyValidObjects.md
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/inventory/common/request-folder-schema.json
        example: TODO
        schema200: !include api/schemas/inventory/common/response-folder-schema.json
        example200: TODO
              
  /release:
    type:
      postJSONWithOkWithoutJSId:
        description: Releases objects
        description1: " "
        description2: !include api/documentation/inventory/updateRelease.md
        description3: !include api/documentation/inventory/releaseIdOrPathAndReleasableType.md
        description4: !include api/documentation/inventory/deleteRelease.md
        description5: !include api/documentation/inventory/releaseIdOrPathAndReleasableType.md
        audit: !include api/documentation/audit/auditLog.md
        schema: !include api/schemas/inventory/release/release-schema.json
        example: TODO
    post:
      responses:
        419:
  
  /releasable:
    type:
      postJSONWithoutJSId:
        description: Get releasable objects
        description1: !include api/documentation/inventory/idOrPathAndReleasableType.md
        description2: !include api/documentation/inventory/onlyValidObjects.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: !include api/documentation/inventory/withReleased.md
        description8: " "
        description9: " "
        description10: " "
        description200: !include api/documentation/inventory/releasable.md
        schema: !include api/schemas/inventory/release/request-releasable-schema.json
        example: TODO
        schema200: !include api/schemas/inventory/release/response-releasable-schema.json
        example200: TODO
        
  /releasables:
    type:
      postJSONWithoutJSId:
        description: Get releasable objects
        description1: !include api/documentation/inventory/folder.md
        description2: !include api/documentation/common/recursive.md
        description3: !include api/documentation/inventory/releasableTypes.md
        description4: !include api/documentation/inventory/onlyValidObjects.md
        description5: " "
        description6: !include api/documentation/inventory/withRemovedObjects.md
        description7: !include api/documentation/inventory/withReleased.md
        description8: " "
        description9: " "
        description10: " "
        description200: !include api/documentation/inventory/releasables.md
        schema: !include api/schemas/inventory/release/request-releasables-schema.json
        example: TODO
        schema200: !include api/schemas/inventory/release/response-releasables-schema.json
        example200: TODO
        
  /remove:
    type:
      postJSONWithOkWithoutJSId:
        description: Removes configurations of inventory objects
        description1: !include api/documentation/inventory/idsOrPathsAndTypes.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        audit: !include api/documentation/audit/auditLog.md
        schema: !include api/schemas/inventory/common/request-filters-schema.json
        example: !include api/examples/inventory/pathsTypes-example.json
  
  /remove/folder:
    type:
      postJSONWithOkWithoutJSId:
        description: Removes folder of inventory objects
        description1: !include api/documentation/inventory/path.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        audit: !include api/documentation/audit/auditLog.md
        schema: !include api/schemas/inventory/common/request-folder-schema.json
        example: TODO
  
  /rename:
    type:
      postJSONWithoutJSId:
        description: Renames/Moves inventory object
        description1: !include api/documentation/inventory/idOrPathAndType.md
        description2: !include api/documentation/inventory/newPath.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: !include api/documentation/audit/auditLog.md
        description200: !include api/documentation/inventory/newObject.md
        schema: !include api/schemas/inventory/rename/request-filter-schema.json
        example: !include api/examples/inventory/rename-example.json
        schema200: !include api/schemas/inventory/common/response-newPath-schema.json
        example200: " "
        
  /replace:
    type:
      postJSONWithOkWithoutJSId:
        description: Search/replace names of inventory objects
        description1: !include api/documentation/inventory/idsOrPathsAndTypes.md
        description2: !include api/documentation/inventory/replace.md
        description3: " "
        description4: " "
        description5: " "
        audit: !include api/documentation/audit/auditLog.md
        schema: !include api/schemas/inventory/replace/request-filters-schema.json
        example: !include api/examples/inventory/replaces-example.json
        
  /replace/folder:
    type:
      postJSONWithOkWithoutJSId:
        description: Search/replace object names of an inventory folder content
        description1: !include api/documentation/inventory/path.md
        description2: !include api/documentation/inventory/replace.md
        description3: " "
        description4: " "
        description5: " "
        audit: !include api/documentation/audit/auditLog.md
        schema: !include api/schemas/inventory/replace/request-folder-schema.json
        example: !include api/examples/inventory/replace-example.json
        
  /statistics:
    type:
      postOnlyId:
        description: |
            Summary with number of deployed<h5>
            * Jobs
            * Workflows
            * Locks
            * Junctions
            * File Watches
            * Schedules
            * Calendars
            </h5>
        description200: " "
        schema200: !include api/schemas/inventory/statistics-schema.json
        example200: !include api/examples/inventory/statistics-example.json
  /store:
    type:
      postJSONWithoutJSId:
        description: Stores inventory object
        description1: !include api/documentation/inventory/idOrPathAndType.md
        description2: " "
        description3: " "
        description4: !include api/documentation/inventory/valid.md
        description5: !include api/documentation/inventory/configuration-request.md
        description6: !include api/documentation/audit/auditLog.md
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: !include api/documentation/inventory/store-response.md
        schema: !include api/schemas/inventory/configurationObject-schema.json
        example: TODO
        schema200: !include api/schemas/inventory/configurationObject-schema.json
        example200: !include api/examples/inventory/store-response-example.json
  
  /trash:
    description: This is not an API call. Use its children!!
    
    /delete:
      type:
        postJSONWithOkWithoutJSId:
          description: Deletes discarded inventory objects
          description1: !include api/documentation/inventory/idsOrPathsAndTypes.md
          description2: " "
          description3: " " 
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/inventory/common/request-filters-schema.json
          example: !include api/examples/inventory/pathsTypes-example.json
    
    /delete/folder:
      type:
        postJSONWithOkWithoutJSId:
          description: Deletes folder of discarded inventory objects
          description1: !include api/documentation/inventory/path.md
          description2: " "
          description3: " " 
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/inventory/common/request-folder-schema.json
          example: TODO
    
    /read/configuration:
      type:
        postJSONWithoutJSId:
          description: Reads configuration of a discarded object
          description1: !include api/documentation/inventory/idOrPathAndTypeOrNameAndType.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          description200: !include api/documentation/inventory/configuration-response.md
          schema: !include api/schemas/inventory/common/request-filter-schema.json
          example: TODO
          schema200: !include api/schemas/inventory/configurationObject-schema.json
          example200: TODO
  
    /read/folder:
      type:
        postJSONWithoutJSId:
          description: Reads folder content
          description1: !include api/documentation/inventory/path.md
          description2: !include api/documentation/inventory/objectTypesWithoutFolder.md
          description3: !include api/documentation/common/recursive.md
          description4: !include api/documentation/inventory/onlyValidObjects.md
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          description200: " "
          schema: !include api/schemas/inventory/common/request-folder-schema.json
          example: TODO
          schema200: !include api/schemas/inventory/common/response-folder-schema.json
          example200: TODO
          
    /restore:
      type:
        postJSONWithoutJSId:
          description: Restore a discarded inventory object
          description1: !include api/documentation/inventory/idOrPathAndType.md
          description2: !include api/documentation/inventory/newRestorePath.md
          description3: " " 
          description4: !include api/documentation/inventory/suffixPrefix4restore.md
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: !include api/documentation/audit/auditLog.md
          description200: !include api/documentation/inventory/newObject.md
          schema: !include api/schemas/inventory/restore/request-filter-schema.json
          example: !include api/examples/inventory/pathType-example.json
          schema200: !include api/schemas/inventory/common/response-newPath-schema.json
          example200: " "
  
  /validate/path:
    type:
      postJSONWithOkWithoutJSId:
        description: Checks the path of a configuration item
        description1: !include api/documentation/inventory/path.md
        description2: !include api/documentation/inventory/objectType-required.md
        description3: " "
        description4: " "
        description5: " "
        audit: " "
        schema: !include api/schemas/inventory/rename/request-filter-schema.json
        example: !include api/examples/inventory/pathType-example.json
        
  /validate/predicate:
    type: error
    post:
      description: <h2>Validates the predicate of an If instruction inside  Workflow</h2>
      body:
        text/plain:
      responses:
        200:
          body:
            application/json:
              schema: !include api/schemas/inventory/validate-schema.json
        420:
          body:
            application/json:
        440:
          body:
            application/json:
  
#/job:
#  /documentation:
#    get:
#    type:
#      postDocu:
#        description: Show documentation
#        jsObjectParam: job
#        jsObject: Job


#TODO
#/jobclass:
#  /configuration:
#    type:
#      postJSON:
#        description: !include api/documentation/common/configuration.md
#        description1: !include api/documentation/processClass/processClassRequired.md
#        description2: !include api/documentation/common/configurationFileMimeParam.md
#        description3: " "
#        description4: " "
#        description5: " "
#        description6: " "
#        description7: " "
#        description8: " "
#        description9: " "
#        description10: " "
#        description200: Returns the process class configuration in XML or HTML format
#        schema: !include api/schemas/processClass/processClassConfigurationFilter-schema.json
#        schema200: !include api/schemas/common/configuration-schema.json
#        example: TODO
#        example200: !include api/examples/processClass/configuration-example.json
#  /documentation:
#    get:
#    type:
#      postDocu:
#        description: Show documentation
#        jsObjectParam: processClass
#        jsObject: ProcessClass
#    /assign:
#      type:
#        postDocuWithOkResponse:
#          description: Assigns a Documentation to the Process Class
#          description1: !include api/documentation/docu/docPath.md
#          description2: " "
#          description3: !include api/documentation/processClass/processClassRequired.md
#          description4: " "
#          schema: !include api/schemas/processClass/processClassDocuFilter-schema.json
#          example: TODO
#          audit: !include api/documentation/audit/auditLog.md
#    /unassign:
#      type:
#        postDocuWithOkResponse:
#          description: Unassigns a Documentation of the Process Class
#          description1: " "
#          description2: " "
#          description3: !include api/documentation/processClass/processClassRequired.md
#          description4: " "
#          schema: !include api/schemas/processClass/processClassDocuFilter-schema.json
#          example: TODO
#          audit: !include api/documentation/audit/auditLog.md
#/jobclasses:
#  type:
#    postJSON:
#      description: process classes (volatile part)
#      description1: !include api/documentation/processClass/filteredByProcessClasses.md
#      description2: !include api/documentation/common/regex.md
#      description3: " "
#      description4: " "
#      description5: !include api/documentation/common/folders.md
#      description6: !include api/documentation/processClass/filteredByHasAgent.md
#      description7: " "
#      description8: " "
#      description9: " "
#      description10: " "
#      description200: !include api/documentation/processClass/processClass_v.md
#      schema: !include api/schemas/processClass/processClassesFilter-schema.json
#      schema200: !include api/schemas/processClass/processClasses_v-schema.json
#      example: TODO
#      example200: !include api/examples/processClass/processClasses_v-example.json
#  /p:
#    type:
#      postJSON:
#        description: process classes (permanent part)
#        description1: !include api/documentation/processClass/filteredByProcessClasses.md
#        description2: !include api/documentation/common/regex.md
#        description3: " "
#        description4: " "
#        description5: !include api/documentation/common/folders.md
#        description6: " "
#        description7: " "
#        description8: " "
#        description9: " "
#        description10: " "
#        description200: !include api/documentation/processClass/processClass_p.md
#        schema: !include api/schemas/processClass/processClassesFilter-schema.json
#        schema200: !include api/schemas/processClass/processClasses_p-schema.json
#        example: TODO
#        example200: !include api/examples/processClass/processClasses_p-example.json

          
/jobs/overview/summary:
  type:
    postJSONWithOptionalJSId:
      description: |
          Summary with number of<h5>
          * successful tasks
          * failed tasks
          </h5>
      description1: !include api/documentation/common/dateFrom.md
      description2: !include api/documentation/common/dateTo.md
      description3: !include api/documentation/common/timeZone.md
      description4: " "
      description5: " "
      description6: " "
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description11: " "
      description12: " "
      description13: " "
      description200: " "
      schema200: !include api/schemas/job/summary-schema.json
      schema: !include api/schemas/job/jobsFilter-schema.json
      example: |
          {
            "dateFrom": "1d"
          }
      example200: !include api/examples/job/summary-example.json
        
/joc:
  description: This is not an API call. Use its children!!
  /cluster:
    /delete_member:
      type:
        postJSONWithOkWithoutJSId:
          description: |
            Deletes a JOC cluster member from the Inventory
            <h5>The member has to be inactive and the last heartbeat has to be older than 1 minute</h5>
          description1: !include api/documentation/cluster/switch.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          audit: " "
          schema: !include api/schemas/cluster/switch-schema.json
          example: " "
    /restart:
      type:
        postJSONWithOkWithoutJSId:
          description: Restarts JOC services such as cluster, history, dailyplan, cleanup 
          description1: !include api/documentation/cluster/restart.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          audit: " "
          schema: !include api/schemas/cluster/restart-schema.json
          example: " "
    /switch_member:
      type:
        postJSONWithOkWithoutJSId:
          description: Switches to an inactive JOC cluster member 
          description1: !include api/documentation/cluster/switch.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          audit: " "
          schema: !include api/schemas/cluster/switch-schema.json
          example: " "
  
  /log:
    type:
      postWithPlainResponse:
        description: Provides JOC Cockpit log (joc.log) as download
        description1: !include api/documentation/joc/filename.md
        description200: Content of JOC Cockpit log (joc.log) for download
        schema: !include api/schemas/joc/filename-schema.json

  /logs:
    type: error
    post:
      description: <h2>Returns a list of JOC Cockpit logs (joc.log)</h2>
      responses:
        200:
          description: " "
          body:
            application/json:
              schema: !include api/schemas/joc/filenames-schema.json
  
  /properties:
    type:
      postOnlyAccessToken:
        description: |
          Response contains some settings from joc.properties file such as 
          * pre-defined audit log comments
          * flag to force audit log comments
          * show/hide views 
        description200: " "
        schema200: !include api/schemas/joc/properties-schema.json
        example200: !include api/examples/joc/properties-example.json

/lock:
  type:
    postJSON:
      description: Returns a deployed lock
      description1: " "
      description2: " "
      description3: !include api/documentation/lock/lockPath.md
      description4: " "
      description5: " "
      description6: " "
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: TODO
      schema: !include api/schemas/lock/lockFilter-schema.json
      schema200: !include api/schemas/lock/lock-schema.json
      example: TODO
      example200: TODO

/locks:
  type:
    postJSON:
      description: Returns the deployed locks
      description1: " "
      description2: " "
      description3: !include api/documentation/common/folders.md
      description4: !include api/documentation/lock/lockPaths.md
      description5: " "
      description6: " "
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: TODO
      schema: !include api/schemas/lock/locksFilter-schema.json
      schema200: !include api/schemas/lock/locks-schema.json
      example: TODO
      example200: !include api/examples/lock/locks.json      

/order:
  type:
    postJSON:
      description: order (volatile part) - <b>IN PROGRESS</b>
      description1: " "
      description2: !include api/documentation/order/orderIdRequired.md
      description3: !include api/documentation/common/compact.md
      description4: " "
      description5: " "
      description6: " "
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: !include api/documentation/order/orders_v.md
      schema: !include api/schemas/order/orderFilter-schema.json
      schema200: !include api/schemas/order/order_v-schema.json
      example: !include api/examples/order/filteredOrder-example.json
      example200: TODO

  /history:
    type:
      postJSON:
        description: Order history of the specified history id from _reporting_
        description1: " "
        description2: " "
        description3: !include api/documentation/order/historyId.md
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: TODO
        schema: orderHistoryFilter
        schema200: !include api/schemas/order/orderHistoryItemChilds-schema.json
        example: " "
        example200: !include api/examples/order/response-orderHistoryItemChilds-example.json
  /log:
    type:
      postJSON:
        description: Order log
        description1: !include api/documentation/order/historyId.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: array of logEvents
        schema: orderHistoryFilter
        schema200: !include api/schemas/order/orderLog-schema.json
        example: " "
        example200: !include api/examples/order/log-example.json
    /running:
      type:
        postJSON:
          description: Order running log
          description1: " "
          description2: !include api/documentation/order/historyId.md
          description3: !include api/documentation/order/runningLog.md
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          schema200: !include api/schemas/order/orderLog-schema.json
          schema: !include api/schemas/order/orderRunningLogFilter-schema.json
          example: TODO
          example200: " "
    /download:
      type:
        postOrderLogWithPlainResponse:
          description: Provides order log as download

#  /documentation:
#    get:
#    is: [ filteredByOrderId ]
#    type:
#      postDocu:
#        description: Show documentation
#        jsObjectParam: workflow
#        jsObject: workflow
#    /assign:
#      type:
#        postDocuWithOkResponse:
#          description: Assigns a Documentation to the Order
#          description1: !include api/documentation/docu/docPath.md
#          description2: !include api/documentation/order/workflow.md
#          description3: !include api/documentation/order/orderIdRequired.md
#          description4: " "
#          schema: !include api/schemas/order/orderDocuFilter-schema.json
#          example: TODO
#          audit: !include api/documentation/audit/auditLog.md
#    /unassign:
#      type:
#        postDocuWithOkResponse:
#          description: Unassigns a Documentation of the Order
#          description1: " "
#          description2: !include api/documentation/order/workflow.md
#          description3: !include api/documentation/order/orderIdRequired.md
#          description4: " "
#          schema: !include api/schemas/order/orderDocuFilter-schema.json
#          example: TODO
#          audit: !include api/documentation/audit/auditLog.md
       
/orders:
  type:
    postJSON:
      description: Returns a collection of orders filtered by workflow or order state
      description1: !include api/documentation/order/orderIds.md
      description2: !include api/documentation/workflow/filteredByWorkflows.md
      description3: !include api/documentation/common/folders.md
      description4: !include api/documentation/common/compact.md
      description5: !include api/documentation/common/regex.md
      description6: !include api/documentation/order/state.md
      description7: !include api/documentation/order/dateTo.md
      description8: !include api/documentation/order/timeZone.md
      description9: " "
      description10: " "
      description200: !include api/documentation/order/orders_v.md
      schema: !include api/schemas/order/ordersFilterV-schema.json
      schema200: !include api/schemas/order/orders_v-schema.json
      example: TODO
      example200: TODO
  /add:
    type:
      addOrder:
        audit: !include api/documentation/audit/auditLog.md
  /cancel:
    type:
      modifyOrder:
        description: Cancel orders  
        signalParam: !include api/documentation/order/signal.md
        positionParam: ""
        audit: !include api/documentation/audit/auditLog.md
  /daily_plan/cancel:
    type:
      postJSON:
        description: Cancels orders 
        description1: !include api/documentation/order/cancelOrderIds.md
        description2: !include api/documentation/order/dailyPlanDate.md
        description3: !include api/documentation/order/signal.md
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: !include api/documentation/audit/auditLog.md
        description200:  
        schema: !include api/schemas/order/cancelDailyPlanOrders-schema.json
        schema200: !include api/schemas/common/ok-schema.json
        example: 
        example200: 

  /history:
    type:
      postJSONWithOptionalJSId:
        description: Order history
        description1: !include api/documentation/order/filteredByOrders.md
        description2: !include api/documentation/order/excludeOrders.md
        description3: !include api/documentation/common/dateFrom.md
        description4: !include api/documentation/common/dateTo.md
        description5: !include api/documentation/common/timeZone.md
        description6: !include api/documentation/order/patterns.md
        description7: !include api/documentation/common/folders.md
        description8: !include api/documentation/common/limit.md
        description9: !include api/documentation/common/historyStates.md
        description10: !include api/documentation/order/historyIds.md
        description11: " "
        description12: " "
        description13: " "
        description200: TODO
        schema: !include api/schemas/order/ordersFilter-schema.json
        schema200: !include api/schemas/order/orderHistory-schema.json
        example: !include api/examples/order/filteredOrders-example.json
        example200: !include api/examples/order/response-orderHistory-example.json
  /overview/snapshot:
      type:
        postJSON:
          description: |
            Summary with number of<h5>
            * pending orders
            * calling orders
            * running orders
            * orders in progress
            * suspended orders
            * failed orders
            * waiting orders
            * blocked orders
            * terminated orders
            </h5>
          description1: " "
          description2: !include api/documentation/workflow/filteredByWorkflows.md
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: !include api/documentation/order/dateTo.md
          description8: !include api/documentation/order/timeZone.md
          description9: " "
          description10: " "
          description200: " "
          schema: !include api/schemas/order/ordersFilterV-schema.json
          example: !include api/examples/controller/controllerParam-example.json
          schema200: !include api/schemas/order/snapshot-schema.json
          example200: !include api/examples/order/snapshot-example.json
  /overview/summary:
      type:
        postJSON:
          description: |
            Summary with number of<h5>
            * successful orders
            * failed orders

            filtered by <code>dateFrom</code> parameter until now
            </h5>
          description1: !include api/documentation/common/dateFrom.md
          description2: !include api/documentation/common/dateTo.md
          description3: !include api/documentation/common/timeZone.md
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          description200: " "
          schema200: !include api/schemas/order/summary-schema.json
          schema: !include api/schemas/order/ordersFilter-schema.json
          example: |
            {
              "dateFrom": "1d"
            }
          example200: !include api/examples/order/summary-example.json
  /remove_when_terminated:
    type:
      modifyOrder:
        description: Remove orders when terminated
        signalParam: " "
        positionParam: " "
        audit: !include api/documentation/audit/auditLog.md
  /resume:
    type:
      modifyOrder:
        description: Resume orders when suspended
        signalParam: " "
        positionParam: !include api/documentation/order/position.md
        audit: !include api/documentation/audit/auditLog.md
  /suspend:
    type:
      modifyOrder:
        description: Suspend orders
        signalParam: !include api/documentation/order/signal.md
        positionParam: " "
        audit: !include api/documentation/audit/auditLog.md
        
/profile:
  description: This is not an API call. Use child urls instead!

  /key:
    type:
      postWithoutJSONandJSId:
        description: gets the stored public key or certificate (SecurityLevel HIGH) or the public key/certificate and private key (SecurityLevel LOW and MEDIUM)
        description1: " "
        description2: " "
        schema: !include api/examples/publish/emptyBody-example.json
        schema200: !include api/schemas/sign/jocKeyPair-schema.json
        example: !include api/examples/publish/emptyBody-example.json
        example200: !include api/examples/publish/showKey-example.json

    /generate:
      type:
        postForGenerateKey:
          description: generates and stores a new private key (only for SecurityLevel LOW and MEDIUM)
          description1: !include api/documentation/publish/generateKeyValidUntil.md
          description2: !include api/documentation/publish/keyAlgorithm.md
          audit: !include api/documentation/audit/auditLog.md
          description200: " "
          schema200: !include api/schemas/sign/jocKeyPair-schema.json
          example200: !include api/examples/publish/showKey-example.json
          schema: !include api/schemas/publish/generateKey-schema.json
          example: !include api/examples/publish/generateKey-example.json
  
    /import:
      type:
        postForUploadSigned:
          description: |
            imports a Private Key, a Public Key or a Certificate file(ASCII format only, no binary files)
            and stores the file content
          schema: !include api/schemas/publish/importKeyFilter-schema.json
          example: " "
    /store:
      type:
        postJSONWithOkWithoutJSId:
          description: stores a new Public Key, a Certificate or Private key (ASCII format only)
          description1: !include api/documentation/publish/setKey.md
          description2: !include api/documentation/publish/setPrivateKey.md
          description3: !include api/documentation/publish/setPublicKey.md
          description4: !include api/documentation/publish/setCertificate.md
          description5: !include api/documentation/publish/setKeyAlgorithm.md
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/publish/setKey-schema.json
          example: !include api/examples/publish/setKey-example.json

/schedule/runtime:
  type:
    postJSONWithoutJSId:
      description: Runtime periods of a Schedule
      description1: " "
      description2: " "
      description3: !include api/documentation/calendar/dateFrom.md
      description4: !include api/documentation/calendar/dateTo.md
      description5: !include api/documentation/orderManagement/timeZone.md
      description6: !include api/documentation/orderManagement/workingCalendar.md
      description7: !include api/documentation/orderManagement/nonWorkingCalendar.md
      description8: " "
      description9: " "
      description10: " "
      description200: Send singles starts or repeat intervals in UTC
      schema: !include api/schemas/orderManagement/scheduleDatesFilter-schema.json
      schema200: !include inventory/schemas/calendar/period-schema.json
      example: !include api/examples/orderManagement/runtime-example.json
      example200: !include api/examples/orderManagement/runtime200-example.json

/schedules:
    type:
      postJSON:
        description: Lists schedules for a given controller 
        description1: !include api/documentation/dailyplan/schedules/dailyPlanSchedulesSelectorDef.md
        description2: !include api/documentation/dailyplan/schedules/folders.md
        description3: !include api/documentation/dailyplan/schedules/schedules.md
        description4: !include api/documentation/dailyplan/schedules/workflowPaths.md
        description5: !include api/documentation/dailyplan/schedules/controllerIds.md
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include api/schemas/orderManagement/orders/schedulesSelector-schema.json
        schema200: !include api/schemas/orderManagement/orders/schedulesList-schema.json
        example: " "
        example200: " "

/task/log:
  type:
    postLog:
      description1: !include api/documentation/job/task.md
      description2: " "
      description3: " "
      schema: taskFilter
      example: TODO
      example200: !include api/examples/job/taskLog-example.txt
  /download:
    type:
      postTaskLogWithPlainResponse:
        description: Provides task log as download
  /running:
    type:
      postJSON:
        description: Task running log
        description1: !include api/documentation/job/runningTasks.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        schema200: !include api/schemas/job/runningTaskLogs-schema.json
        schema: !include api/schemas/job/runningTaskLogsFilter-schema.json
        example: TODO
        example200: " "

/tasks/history:
  type:
    postJSONWithOptionalJSId:
      description: Task history
      description1: !include api/documentation/job/filteredByJobs.md
      description2: !include api/documentation/job/excludeJobs.md
      description3: !include api/documentation/common/dateFrom.md
      description4: !include api/documentation/common/dateTo.md
      description5: !include api/documentation/common/timeZone.md
      description6: !include api/documentation/job/patterns.md
      description7: !include api/documentation/common/folders.md
      description8: !include api/documentation/common/limit.md
      description9: !include api/documentation/common/historyStates.md
      description10: !include api/documentation/job/criticalities.md
      description11: !include api/documentation/job/taskIds.md
      # TODO introduce label in HISTORY_ORDER_STEPS then use label instead of workflow position: description12: !include api/documentation/job/taskIdOfOrder.md
      description12: " "
      description13: " "
      description200: TODO
      schema: !include api/schemas/job/jobsFilter-schema.json
      schema200: !include api/schemas/job/history-schema.json
      example: TODO
      example200: !include api/examples/job/taskHistory-example.json

/touch:
  type: error
  post:
    description: |
      <h2>Refesh the session timeout</h2>
    responses:
      200:
        description: |
          **Confirm 'Touch' successfully**
        body:
          application/json:
            example: |
              {
                "deliveryDate":"2016-05-05T21:13:35Z",
                "ok":true
              }
            schema: ok

# moved to api-internal.raml
#/tree:
#  type:
#    postJSON:
#      description: Collections of specified object with folders information in a tree structure
#      description1: " "
#      description2: " "
#      description3: " "
#      description4: " "
#      description5: " "
#      description6: !include api/documentation/common/folders.md
#      description7: !include api/documentation/common/typesParam.md
#      description8: !include api/documentation/inventory/onlyValidObjects.md
#      description9: " "
#      description10: " "
#      description200: !include api/documentation/tree/tree.md
#      schema: !include api/schemas/tree/treeFilter-schema.json
#      schema200: !include api/schemas/tree/treeView-schema.json
#      example: !include api/examples/tree/filteredtree-example.json
#      example200: !include api/examples/tree/tree-example.json

/utilities:
  /convert_relative_dates:
    type:
      postJSONWithoutJSId:
        description: To convert a relative date like +1d to a date yyyy-mm-dd
        description1: !include api/documentation/dailyplan/relativeDates.md
        description2:  
        description3:  
        description4: 
        description5: 
        description6: 
        description7: 
        description9: 
        description10: 
        audit:  
        description200: " "
        schema: !include api/schemas/orderManagement/dailyplan/relativeDatesConverter-schema.json
        schema200: !include api/schemas/orderManagement/dailyplan/relativeDatesConverter-schema.json
        example: " "
        example200: " "

  /cyclic_orders:
    type:
      postJSONWithoutJSId:
        description: To expand a list of orderIds to a list with the expanded cyclic orderIds
        description1: !include api/documentation/dailyplan/cyclicOrders.md
        description2:  
        description3:  
        description4: 
        description5: 
        description6: 
        description7: 
        description9: 
        description10: 
        audit:  
        description200: " "
        schema: !include api/schemas/order/ordersFilterV-schema.json
        schema200: !include api/schemas/order/orderIds-schema.json
        example: " "
        example200: " "




/workflow:
  type:
    postJSON:
      description: Returns a workflow - <b>IN PROGRESS</b>
      description1: !include api/documentation/workflow/workflowId.md
      description2: " "
      description3: " "
      description4: !include api/documentation/common/compact.md
      description5: " "
      description6: " "
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: TODO
      schema: !include api/schemas/workflow/workflowFilter-schema.json
      schema200: !include api/schemas/workflow/workflow-schema.json
      example: TODO
      example200: TODO

/workflows:
  type:
    postJSON:
      description: Returns workflows
      description1: !include api/documentation/workflow/filteredByWorkflows.md
      description2: " "
      description3: !include api/documentation/common/folders.md
      description4: !include api/documentation/common/compact.md
      description5: !include api/documentation/common/regex.md
      description6: " "
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: TODO
      schema: !include api/schemas/workflow/workflowsFilter-schema.json
      schema200: !include api/schemas/workflow/workflows-schema.json
      example: TODO
      example200: TODO
      
#TODO
#/yade:
#  description: This is not an API call. Use its children!!
#   
#  /overview/summary:
#    type:
#      postJSON:
#        description: |
#            Summary with number of<h5>
#            * successful transferred files
#            * failed transferred files
#  
#            filtered by <code>dateFrom</code> parameter until now
#            </h5>
#        description1: !include api/documentation/common/dateFrom.md
#        description2: !include api/documentation/common/dateTo.md
#        description3: !include api/documentation/common/timeZone.md
#        description4: " "
#        description5: " "
#        description6: " "
#        description7: " "
#        description8: " "
#        description9: " "
#        description10: " "
#        description200: " "
#        schema200: !include api/schemas/yade/summary-schema.json
#        schema: !include api/schemas/yade/transferFilter-schema.json
#        example: |
#            {
#              "dateFrom": "1d"
#            }
#        example200: !include api/examples/yade/summary-example.json
#  /overview/snapshot:
#      type:
#        postOnlyId:
#          description: |
#            Summary with number of<h5>
#            * running YADE transfers
#            * suspended YADE transfers
#            * YADE transfers with setback
#            * waiting for resource YADE transfers
#            </h5>
#          description200: " "
#          example: " "
#          schema200: !include api/schemas/yade/snapshot-schema.json
#          example200: " "
#
#  /transfers:
#    type:
#      postJSON18:
#        description: Responds YADE transfers
#        description1: !include api/documentation/yade/transferIds.md
#        description2: !include api/documentation/common/compact.md
#        description3: !include api/documentation/common/dateFrom.md
#        description4: !include api/documentation/common/dateTo.md
#        description5: !include api/documentation/common/timeZone.md
#        description6: !include api/documentation/yade/operations.md
#        description7: !include api/documentation/yade/states.md
#        description8: !include api/documentation/yade/mandator.md
#        description9: !include api/documentation/yade/source.md
#        description10: !include api/documentation/yade/target.md
#        description11: !include api/documentation/yade/hasIntervention.md
#        description12: !include api/documentation/yade/isIntervention.md
#        description13: !include api/documentation/yade/profile.md
#        description14: !include api/documentation/yade/sourcePathRegex.md
#        description15: !include api/documentation/yade/targetPathRegex.md
#        description16: !include api/documentation/yade/sourcePath.md
#        description17: !include api/documentation/yade/targetPath.md
#        description18: !include api/documentation/common/limit.md
#        description200: !include api/documentation/yade/transfers.md
#        schema: !include api/schemas/yade/transferFilter-schema.json
#        schema200: !include api/schemas/yade/transfers-schema.json
#        example: " "
#        example200: " "
#
#    /restart:
#      type:
#        postYADEJSONWithOkResponse:
#          description: Restarts YADE transfers for some failed files
#          audit: !include api/documentation/audit/auditLog.md
#          schema: !include api/schemas/yade/modifyTransfers-schema.json
#          example: " "
#  
#  /files:
#    type:
#      postJSON:
#        description: Responds transferred files
#        description1: !include api/documentation/common/compact.md
#        description2: " "
#        description3: !include api/documentation/yade/transferIds.md
#        description4: !include api/documentation/yade/interventionTransferIds.md
#        description5: " "
#        description6: !include api/documentation/yade/fileStates.md
#        description7: " "
#        description8: !include api/documentation/yade/sourcePath.md
#        description9: !include api/documentation/yade/targetPath.md
#        description10: !include api/documentation/common/limit.md
#        description200: " "
#        schema: !include api/schemas/yade/filesFilter-schema.json
#        schema200: !include api/schemas/yade/files-schema.json
#        example: " "
#        example200: " "
#
#  /file:
#    type:
#      postJSON:
#        description: Responds transferred file
#        description1: !include api/documentation/common/compact.md
#        description2: !include api/documentation/yade/fileId.md
#        description3: " "
#        description4: " "
#        description5: " "
#        description6: " "
#        description7: " "
#        description8: " "
#        description9: " "
#        description10: " "
#        description200: " "
#        schema: !include api/schemas/yade/fileFilter-schema.json
#        schema200: !include api/schemas/yade/file200-schema.json
#        example: " "
#        example200: " "
#
#  /transfer/order:
#    type:
#      postJSON:
#        description: Lists parametrisized order information for "resume order" dialog
#        description1: !include api/documentation/yade/transferId.md
#        description2: " "
#        description3: " "
#        description4: " "
#        description5: " "
#        description6: " "
#        description7: " "
#        description8: " "
#        description9: " "
#        description10: " "
#        description200: " "
#        schema: !include api/schemas/yade/modifyTransfer-schema.json
#        schema200: !include api/schemas/order/order200_v-schema.json  
#        example: " "
#        example200: " "
#
#  /orders:
#    type:
#      postJSON:
#        description: Returns a collection of orders (volatile part) filtered by a period, job chains or order state
#        description1: !include api/documentation/common/compact.md
#        description2: " "
#        description3: " "
#        description4: " "
#        description5: " "
#        description6: !include api/documentation/order/filteredByOrders.md
#        description7: !include api/documentation/yade/orderstate.md
#        description8: " "
#        description9: " "
#        description10: " "
#        description200: !include api/documentation/order/orders_v.md
#        schema: !include api/schemas/order/ordersFilter-schema.json
#        schema200: !include api/schemas/order/orders_v-schema.json
#        example: !include api/examples/order/filteredOrders-example.json
#        example200: " "
