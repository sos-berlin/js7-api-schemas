#%RAML 0.8
title: JOC API Internal
version: 2.7.7
protocols: [ HTTP, HTTPS ]
#baseUri: http://test.sos-berlin.com:3001/joc/api
#mediaType: application/json

#documentation:
# TODO VERSIONS file for internal API
#  - title: VERSIONS
#    content: !include api/documentation/common/versions.md


schemas:
  - errors: !include api/schemas/common/errors-schema.json
  - error420: !include api/schemas/common/error420-schema.json
  - ok: !include api/schemas/common/ok-schema.json
  - orders: !include api/schemas/order/orders_v-schema.json
  - jsFilter: !include api/schemas/controller/controllerId-optional-schema.json
  - jsFilterReq: !include api/schemas/controller/controllerId-required-schema.json
  - jsFilterWithUrl: !include api/schemas/controller/urlParam-schema.json
  - jsRegister: !include api/schemas/controller/registerParam-schema.json
  - taskFilter: !include api/schemas/job/taskFilter-schema.json
  - orderHistoryFilter: !include api/schemas/order/orderHistoryFilter-schema.json
  - addOrders: !include api/schemas/order/addOrders-schema.json
  - orderIds: !include api/schemas/order/orderIds-schema.json
  - modifyOrders: !include api/schemas/order/modifyOrders-schema.json
  - modifyCalendars: !include api/schemas/calendar/calendarsFilter-schema.json
  - security: !include api/schemas/user/security-schema.json
  - loginConfiguration: !include api/schemas/configuration/login-schema.json


resourceTypes:
  - error: !include api/resourceTypes/common/error.raml
  - postWithPlainResponse: !include api/resourceTypes/joc/postWithPlainResponse.raml
  - postCalendarWithOkResponse: !include api/resourceTypes/calendar/postJSONWithOkResponse.raml
  - postDocuWithOkResponse: !include api/resourceTypes/docu/postJSONWithOkResponse.raml
  - postWithOkResponse: !include api/resourceTypes/controller/postWithOkResponse.raml
  - registerControllerWithOkResponse: !include api/resourceTypes/controller/registerControllerWithOkResponse.raml
  - postURLWithPlainResponse: !include api/resourceTypes/controller/postWithPlainResponse.raml
  - postStateResponse: !include api/resourceTypes/controller/postStateResponse.raml
  - postJSON: !include api/resourceTypes/common/postJSON.raml
  - postJSONWithOptionalJSId: !include api/resourceTypes/common/postJSONWithOptionalJSId.raml
  - postJSONWithoutJSId: !include api/resourceTypes/common/postJSONWithoutJSId.raml
  - postWithoutJSONandJSId: !include api/resourceTypes/common/postWithoutJSONandJSId.raml
  - postJSONWithOkWithoutJSId: !include api/resourceTypes/common/postJSONWithOkWithoutJSId.raml
  - postOnlyAccessToken: !include api/resourceTypes/common/postOnlyAccessToken.raml
  - postOnlyId: !include api/resourceTypes/common/postOnlyId.raml
  - postOnlyOptionalId: !include api/resourceTypes/common/postOnlyOptionalId.raml
  - postJSONWithOkResponse: !include api/resourceTypes/common/postJSONWithOkResponse.raml
  - postForDownload: !include api/resourceTypes/common/postForDownload.raml
  - postForUpload: !include api/resourceTypes/common/postForUpload.raml
  - postLog: !include api/resourceTypes/common/postLog.raml
  - postDocu: !include api/resourceTypes/docu/postDocu.raml
  - getDocu: !include api/resourceTypes/docu/getDocu.raml
  - login: !include api/resourceTypes/user/login.raml
  - logout: !include api/resourceTypes/user/logout.raml
  - postEvent: !include api/resourceTypes/common/postEvent.raml
  - postTaskLogWithPlainResponse: !include api/resourceTypes/job/postWithPlainResponse.raml
  - modifyOrder: !include api/resourceTypes/order/modify.raml
  - addOrder: !include api/resourceTypes/order/add.raml
  - postOrderLogWithPlainResponse: !include api/resourceTypes/order/postWithPlainResponse.raml
  - modifyCalendar: !include api/resourceTypes/calendar/modify.raml
  - loginConfiguration: !include api/resourceTypes/configuration/login.raml
  - postForDownloadUnsigned: !include api/resourceTypes/publish/postForDownloadUnsigned.raml
  - postForUploadSigned: !include api/resourceTypes/publish/postForUploadSigned.raml
  - postForUploadUnsigned: !include api/resourceTypes/publish/postForUploadUnsigned.raml
  - postForGenerateKey: !include api/resourceTypes/publish/postForGenerateKey.raml
  - postForExport: !include api/resourceTypes/publish/postForExport.raml
  - postForImportDeploy: !include api/resourceTypes/publish/postForImportDeploy.raml
  - postForShowDepHistory: !include api/resourceTypes/publish/postForShowDepHistory.raml
  

traits:
  - jobschedulerController: !include api/traits/jobschedulerController.raml
  - filteredByPath: !include api/traits/filteredByPath.raml
  - filteredByOrderId: !include api/traits/filteredByOrderId.raml
  - filteredByJSType: !include api/traits/filteredByJSType.raml
  - filteredByTransferFileId: !include api/traits/filteredByTransferFileId.raml
  - accessToken: !include api/traits/accessToken.raml
  - filename: !include api/traits/filename.raml


/agents:
  /names:
    type:
      postJSONWithOptionalJSId:
        description: Get enabled Agent names and aliases
        description1: " "
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description11: " "
        description12: " "
        description13: " "
        description200: Collection of enabled Agent names
        schema: !include api/schemas/controller/controllerId-optional-schema.json
        schema200: !include api/schemas/agent/agentNames-schema.json
        example: !include api/examples/controller/controllerParam-example.json
        example200 : !include api/examples/agent/agentNames-example.json
      
  /cluster/ids:
    type:
      postJSONWithOptionalJSId:
        description: Get Agent Cluster IDs
        description1: " "
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description11: " "
        description12: " "
        description13: " "
        description200: " "
        schema: !include api/schemas/agent/readAgents-schema.json
        schema200: !include api/schemas/agent/clusterAgents-schema.json
        example: " "
        example200: " "
  
/auditlog/comments:
  type:
    postOnlyAccessToken:
      description: Gets pre-defined comments and force_comments_for_audit_log settings
      description200: " "
      schema200: !include api/schemas/audit/comments-schema.json
      example200: !include api/examples/audit/comments-example.json
       
/configuration:
  type:
     postJSON:
       description: Responds a configuration from the server (database)
#       description1: !include api/documentation/configuration/userRequiredParam.md
#       description2: !include api/documentation/configuration/configurationTypeRequiredParam.md
#       description3: !include api/documentation/configuration/objectTypeRequiredParam.md
#       description4: !include api/documentation/configuration/nameParam.md
       description1: " "
       description2: " "
       description3: " "
       description4: " "
       description5: !include api/documentation/configuration/configurationIdRequiredParam.md
       description6: " "
       description7: " "
       description8: " "
       description9: " "
       description10: " "
       description200: " "
       schema: !include api/schemas/configuration/configuration-schema.json
       schema200: !include api/schemas/configuration/configuration200-schema.json
       example: " "
       example200: " "
  /delete:
    type:
       postJSON:
         description: Deletes a configuration on the server (database)
#         description1: !include api/documentation/configuration/userRequiredParam.md
#         description2: !include api/documentation/configuration/configurationTypeRequiredParam.md
#         description3: !include api/documentation/configuration/objectTypeRequiredParam.md
#         description4: !include api/documentation/configuration/nameParam.md
         description1: " "
         description2: " "
         description3: " "
         description4: " "
         description5: !include api/documentation/configuration/configurationIdRequiredParam.md
         description6: " "
         description7: " "
         description8: " "
         description9: " "
         description10: " "
         description200: " "
         schema: !include api/schemas/configuration/configuration-schema.json
         schema200: !include api/schemas/configuration/configurationOk-schema.json
         example: " "
         example200: |
           {
             "deliveryDate":"2016-05-05T21:13:35Z",
             "id":4711
           }
  /make_private:
    type:
       postJSON:
         description: set a configuration as unshared
#         description1: !include api/documentation/configuration/userRequiredParam.md
#         description2: !include api/documentation/configuration/configurationTypeRequiredParam.md
#         description3: !include api/documentation/configuration/objectTypeRequiredParam.md
#         description4: !include api/documentation/configuration/nameParam.md
         description1: " "
         description2: " "
         description3: " "
         description4: " "
         description5: !include api/documentation/configuration/configurationIdRequiredParam.md
         description6: " "
         description7: " "
         description8: " "
         description9: " "
         description10: " "
         description200: " "
         schema: !include api/schemas/configuration/configuration-schema.json
         schema200: !include api/schemas/configuration/configurationOk-schema.json
         example: " "
         example200: |
           {
             "deliveryDate":"2016-05-05T21:13:35Z",
             "id":4711
           }
  /login:
    type: loginConfiguration
  
  /save:
    type:
       postJSONWithOptionalJSId:
         description: Stores a configuration on the server (database)
         description1: " "
         description2: !include api/documentation/configuration/configurationTypeRequiredParam.md
         description3: !include api/documentation/configuration/objectTypeRequiredParam.md
         description4: !include api/documentation/configuration/nameParam.md
         description5: !include api/documentation/configuration/sharedParam.md
         description6: !include api/documentation/configuration/itemParam.md
         description7: !include api/documentation/configuration/configurationIdRequiredParam.md
         description8: " "
         description9: " "
         description10: " "
         description11: " "
         description12: " "
         description13: " "
         description200: |
             *Response contains the ``id`` of the customization.*<br/>
             It seems to be unnecessary but if a new customization is saved
             (with ``id=0`` in the request) then you get the new id.
         schema: !include api/schemas/configuration/configuration-schema.json
         schema200: !include api/schemas/configuration/configurationOk-schema.json
         example: " "
         example200: |
           {
             "deliveryDate":"2016-05-05T21:13:35Z",
             "id":4711
           }
  /share:
    type:
       postJSON:
         description: set a configuration as shared
#         description1: !include api/documentation/configuration/userRequiredParam.md
#         description2: !include api/documentation/configuration/configurationTypeRequiredParam.md
#         description3: !include api/documentation/configuration/objectTypeRequiredParam.md
#         description4: !include api/documentation/configuration/nameParam.md
         description1: " "
         description2: " "
         description3: " "
         description4: " "
         description5: !include api/documentation/configuration/configurationIdRequiredParam.md
         description6: " "
         description7: " "
         description8: " "
         description9: " "
         description10: " "
         description200: " "
         schema: !include api/schemas/configuration/configuration-schema.json
         schema200: !include api/schemas/configuration/configurationOk-schema.json
         example: " "
         example200: |
           {
             "deliveryDate":"2016-05-05T21:13:35Z",
             "id":4711
           }
  
/configurations:
  type:
     postJSONWithOptionalJSId:
       description: Get collection of configuration items
       description1: !include api/documentation/configuration/userParam.md
       description2: !include api/documentation/configuration/configurationTypeParam.md
       description3: !include api/documentation/configuration/objectTypeParam.md
       description4: !include api/documentation/configuration/sharedParam.md
       description5: " "
       description6: " "
       description7: " "
       description8: " "
       description9: " "
       description10: " "
       description200: " "
       schema: !include api/schemas/configuration/configurationsFilter-schema.json
       schema200: !include api/schemas/configuration/configurations-schema.json
       example: " "
       example200: " "
  /delete:
    type:
      postJSONWithOkWithoutJSId:
        description: Deletes all configuration items (profile, settings, customizations, ignore lists) of specified accounts 
        description1: !include api/documentation/configuration/usersParam.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        schema: !include api/schemas/configuration/configurationsDeleteFilter-schema.json
        example: " "
#  /shared:
#    type:
#       postOnlyId:
#         description: Sends collection of all shared configuration items
#         description200: " "
#         schema200: !include api/schemas/configuration/configurations-schema.json
#         example200: " "

/controller:
  /components:
    type:
      postOnlyId:
        description: Get Controller components
        description200: " "
        schema200: !include api/schemas/controller/components-schema.json
        example200: " "
  /switch:
    type:
      postOnlyId:
        description: Switches the current Controller (Cluster) in JOC Cockpit
        description200: " "
        example200: |
          {
            "deliveryDate":"2021-05-05T21:13:35Z",
            "ok":true
          }
        schema200: ok

/controllers:
  /security_level:
    type:
      postOnlyAccessToken:
        description: Gets Controller IDs with security level
        description200: !include api/documentation/controller/securityLevels.md
        schema200: !include api/schemas/controller/masters-schema.json
        example200: !include api/examples/controller/securityLevels-example.json
    /take_over:
      type:
        postWithOkResponse:
          description: Current security level will be take over to existing Controllers

/documentation/{accessToken}/{path}:
   type:
      getDocu:
        description: " "
        
/events:
  type:
    postEvent:
      description200: !include api/documentation/event/event200.md
      schema: !include api/schemas/event/controllerFilter-schema.json
      schema200: !include api/schemas/event/event-schema.json
      example200: !include api/examples/event/events-example.json

/inventory:
  /deployment:
    /set_version:
      type:
        postJSONWithOkWithoutJSId:
          description: Sets a new version to an array of JS Objects
          description1: !include api/documentation/publish/setVersionFilter.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/publish/setVersion-schema.json
          example: !include api/examples/publish/setVersion-example.json
  
    /set_versions:
      type:
        postJSONWithOkWithoutJSId:
          description: Sets a new version per item to an array of JS Objects
          description1: !include api/documentation/publish/setVersionsFilter.md
          description2: " "
          description3: " "
          description4: " "
          description5: " "
          audit: !include api/documentation/audit/auditLog.md
          schema: !include api/schemas/publish/setVersions-schema.json
          example: !include api/examples/publish/setVersions-example.json
                
/joc/properties:
  type:
    postOnlyAccessToken:
      description: |
        Response contains some settings from joc.properties file such as 
        * pre-defined audit log comments
        * flag to force audit log comments
        * show/hide views 
      description200: " "
      schema200: !include api/schemas/joc/properties-schema.json
      example200: !include api/examples/joc/properties-example.json


/tree:
  type:
    postJSONWithOptionalJSId:
      description: Collections of specified object with folders information in a tree structure
      description1: " "
      description2: " "
      description3: " "
      description4: " "
      description5: " "
      description6: !include api/documentation/common/folders.md
      description7: !include api/documentation/common/typesParam.md
      description8: !include api/documentation/inventory/onlyValidObjects.md
      description9: " "
      description10: " "
      description11: " "
      description12: " "
      description13: " "
      description200: !include api/documentation/tree/tree.md
      schema: !include api/schemas/tree/treeFilter-schema.json
      schema200: !include api/schemas/tree/treeView-schema.json
      example: !include api/examples/tree/filteredtree-example.json
      example200: !include api/examples/tree/tree-example.json


        